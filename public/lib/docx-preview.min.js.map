{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/mathml.scss","webpack://docx/./node_modules/css-loader/dist/runtime/api.js","webpack://docx/./node_modules/css-loader/dist/runtime/getUrl.js","webpack://docx/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/custom-props-part.ts","webpack://docx/./src/document-props/custom-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmarks.ts","webpack://docx/./src/document/border.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/header-footer/elements.ts","webpack://docx/./src/header-footer/parts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/notes/elements.ts","webpack://docx/./src/notes/parts.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/settings/settings-part.ts","webpack://docx/./src/settings/settings.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/vml/vml.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd {\"root\":\"JSZip\",\"commonjs\":\"jszip\",\"commonjs2\":\"jszip\",\"amd\":\"jszip\"}","webpack://docx/webpack/bootstrap","webpack://docx/webpack/runtime/compat get default export","webpack://docx/webpack/runtime/define property getters","webpack://docx/webpack/runtime/hasOwnProperty shorthand","webpack://docx/webpack/runtime/make namespace object","webpack://docx/webpack/runtime/jsonp chunk loading","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jszip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jszip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"jszip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(globalThis, (__WEBPACK_EXTERNAL_MODULE__626__) => {\nreturn ","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../node_modules/css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 20 100%27 preserveAspectRatio=%27none%27%3E%3Cpath d=%27m0,75 l5,0 l5,25 l10,-100%27 stroke=%27black%27 fill=%27none%27 vector-effect=%27non-scaling-stroke%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@namespace \\\"http://www.w3.org/1998/Math/MathML\\\";math{display:inline-block;line-height:initial}mfrac{display:inline-block;vertical-align:-50%;text-align:center}mfrac>:first-child{border-bottom:solid thin currentColor}mfrac>*{display:block}msub>:nth-child(2){font-size:smaller;vertical-align:sub}msup>:nth-child(2){font-size:smaller;vertical-align:super}munder,mover,munderover{display:inline-flex;flex-flow:column nowrap;vertical-align:middle;text-align:center}munder>:not(:first-child),mover>:not(:first-child),munderover>:not(:first-child){font-size:smaller}munderover>:last-child{order:-1}mroot,msqrt{position:relative;display:inline-block;border-top:solid thin currentColor;margin-top:.5px;vertical-align:middle;margin-left:1ch}mroot:before,msqrt:before{content:\\\"\\\";display:inline-block;position:absolute;width:1ch;left:-1ch;top:-1px;bottom:0;background-image:url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \")}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/mathml.scss\"],\"names\":[],\"mappings\":\"AAAA,+CAAA,CAEA,KACI,oBAAA,CACA,mBAAA,CAGJ,MACI,oBAAA,CACA,mBAAA,CACA,iBAAA,CAEA,mBACI,qCAAA,CAGJ,QACI,aAAA,CAKJ,mBACI,iBAAA,CACA,kBAAA,CAKJ,mBACI,iBAAA,CACA,oBAAA,CAIR,wBACI,mBAAA,CACA,uBAAA,CACA,qBAAA,CACA,iBAAA,CAEA,iFACI,iBAAA,CAKJ,uBAAA,QAAA,CAGJ,YACI,iBAAA,CACA,oBAAA,CACA,kCAAA,CACA,eAAA,CACA,qBAAA,CACA,eAAA,CAEA,0BACI,UAAA,CACA,oBAAA,CACA,iBAAA,CACA,SAAA,CACA,SAAA,CACA,QAAA,CACA,QAAA,CACA,wDAAA\",\"sourcesContent\":[\"@namespace \\\"http://www.w3.org/1998/Math/MathML\\\";\\n\\nmath {\\n    display: inline-block;\\n    line-height: initial;\\n}\\n\\nmfrac {\\n    display: inline-block;\\n    vertical-align: -50%;\\n    text-align: center;\\n\\n    &>:first-child {\\n        border-bottom: solid thin currentColor;\\n    }\\n\\n    &>* {\\n        display: block;\\n    }\\n}\\n\\nmsub {\\n    &>:nth-child(2) {\\n        font-size: smaller;\\n        vertical-align: sub;\\n    }\\n}\\n\\nmsup {\\n    &>:nth-child(2) {\\n        font-size: smaller;\\n        vertical-align: super;\\n    }\\n}\\n\\nmunder, mover, munderover {\\n    display: inline-flex;\\n    flex-flow: column nowrap;\\n    vertical-align: middle;\\n    text-align: center;\\n\\n    &>:not(:first-child) {\\n        font-size: smaller;\\n    }\\n}\\n\\nmunderover {\\n    &>:last-child { order: -1; }\\n}\\n\\nmroot, msqrt {\\n    position: relative;\\n    display: inline-block;\\n    border-top: solid thin currentColor;  \\n    margin-top: 0.5px;\\n    vertical-align: middle;  \\n    margin-left: 1ch; \\n\\n    &:before {\\n        content: \\\"\\\";\\n        display: inline-block;\\n        position: absolute;\\n        width: 1ch;\\n        left: -1ch;\\n        top: -1px;\\n        bottom: 0;\\n        background-image: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 100' preserveAspectRatio='none'%3E%3Cpath d='m0,75 l5,0 l5,25 l10,-100' stroke='black' fill='none' vector-effect='non-scaling-stroke'/%3E%3C/svg%3E\\\");\\n    }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___.toString();\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n  return url;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","import * as JSZip from \"jszip\";\nimport {parseXmlString, XmlParser} from \"../parser/xml-parser\";\nimport {splitPath} from \"../utils\";\nimport {parseRelationships, Relationship} from \"./relationship\";\n\nexport interface OpenXmlPackageOptions {\n    trimXmlDeclaration: boolean,\n    keepOrigin: boolean,\n}\n\nexport class OpenXmlPackage {\n    xmlParser: XmlParser = new XmlParser();\n\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\n    }\n\n    get(path: string): JSZip.JSZipObject | null {\n        return this._zip.file(normalizePath(path));\n    }\n\n    update(path: string, content: any) {\n        this._zip.file(path, content);\n    }\n\n    static async load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\n        const zip = await JSZip.loadAsync(input);\n        return new OpenXmlPackage(zip, options);\n    }\n\n    save(type: any = \"blob\"): Promise<any> {\n        return this._zip.generateAsync({type});\n    }\n\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<JSZip.OutputType | null> {\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\n    }\n\n    async loadRelationships(path: string = null): Promise<Relationship[]> {\n        let relsPath = `_rels/.rels`;\n\n        if (path != null) {\n            const [f, fn] = splitPath(path);\n            relsPath = `${f}_rels/${fn}.rels`;\n        }\n\n        const txt = await this.load(relsPath);\n        return txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null;\n    }\n\n    /** @internal */\n    parseXmlDocument(txt: string): Document {\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\n    }\n}\n\nfunction normalizePath(path: string) {\n    return path.startsWith('/') ? path.substr(1) : path;\n}","import {serializeXmlString} from \"../parser/xml-parser\";\nimport {OpenXmlPackage} from \"./open-xml-package\";\nimport {Relationship} from \"./relationship\";\n\nexport class Part {\n    protected _xmlDocument: Document;\n\n    rels: Relationship[];\n\n    constructor(protected _package: OpenXmlPackage, public path: string) {\n    }\n\n    async load(): Promise<any> {\n        this.rels = await this._package.loadRelationships(this.path);\n\n        const xmlText = await this._package.load(this.path);\n        const xmlDoc = this._package.parseXmlDocument(xmlText);\n\n        if (this._package.options.keepOrigin) {\n            this._xmlDocument = xmlDoc;\n        }\n\n        this.parseXml(xmlDoc.firstElementChild);\n    }\n\n    save() {\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\n    }\n\n    protected parseXml(root: Element) {\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport interface Relationship {\n    id: string,\n    type: RelationshipTypes | string,\n    target: string\n    targetMode: \"\" | \"External\" | string\n}\n\nexport enum RelationshipTypes {\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\n    Endnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes\",\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\n    CustomProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/custom-properties\",\n}\n\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\n    return xml.elements(root).map(e => <Relationship>{\n        id: xml.attr(e, \"Id\"),\n        type: xml.attr(e, \"Type\"),\n        target: xml.attr(e, \"Target\"),\n        targetMode: xml.attr(e, \"TargetMode\")\n    });\n}","import {\n    DomType, WmlTable, IDomNumbering,\n    WmlHyperlink, IDomImage, OpenXmlElement, WmlTableColumn, WmlTableCell,\n    WmlTableRow, NumberingPicBullet, WmlText, WmlSymbol, WmlBreak, WmlNoteReference\n} from './document/dom';\nimport {DocumentElement} from './document/document';\nimport {WmlParagraph, parseParagraphProperties, parseParagraphProperty} from './document/paragraph';\nimport {parseSectionProperties, SectionProperties} from './document/section';\nimport xml from './parser/xml-parser';\nimport {parseRunProperties, WmlRun} from './document/run';\nimport {parseBookmarkEnd, parseBookmarkStart} from './document/bookmarks';\nimport {IDomStyle, IDomSubStyle} from './document/style';\nimport {WmlFieldChar, WmlFieldSimple, WmlInstructionText} from './document/fields';\nimport {convertLength, LengthUsage, LengthUsageType} from './document/common';\nimport {parseVmlElement} from './vml/vml';\n\nexport var autos = {\n    shd: \"inherit\",\n    color: \"black\",\n    borderColor: \"black\",\n    highlight: \"transparent\"\n};\n\nconst supportedNamespaceURIs = [];\n\nconst mmlTagMap = {\n    \"oMath\": DomType.MmlMath,\n    \"oMathPara\": DomType.MmlMathParagraph,\n    \"f\": DomType.MmlFraction,\n    \"num\": DomType.MmlNumerator,\n    \"den\": DomType.MmlDenominator,\n    \"rad\": DomType.MmlRadical,\n    \"deg\": DomType.MmlDegree,\n    \"e\": DomType.MmlBase,\n    \"sSup\": DomType.MmlSuperscript,\n    \"sSub\": DomType.MmlSubscript,\n    \"sup\": DomType.MmlSuperArgument,\n    \"sub\": DomType.MmlSubArgument,\n    \"d\": DomType.MmlDelimiter,\n    \"nary\": DomType.MmlNary,\n}\n\nexport interface DocumentParserOptions {\n    ignoreWidth: boolean;\n    debug: boolean;\n}\n\nexport class DocumentParser {\n    options: DocumentParserOptions;\n\n    constructor(options?: Partial<DocumentParserOptions>) {\n        this.options = {\n            ignoreWidth: false,\n            debug: false,\n            ...options\n        };\n    }\n\n    parseNotes(xmlDoc: Element, elemName: string, elemClass: any): any[] {\n        var result = [];\n\n        for (let el of xml.elements(xmlDoc, elemName)) {\n            const node = new elemClass();\n            node.id = xml.attr(el, \"id\");\n            node.noteType = xml.attr(el, \"type\");\n            node.children = this.parseBodyElements(el);\n            result.push(node);\n        }\n\n        return result;\n    }\n\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\n        var xbody = xml.element(xmlDoc, \"body\");\n        var background = xml.element(xmlDoc, \"background\");\n        var sectPr = xml.element(xbody, \"sectPr\");\n\n        return {\n            type: DomType.Document,\n            children: this.parseBodyElements(xbody),\n            props: sectPr ? parseSectionProperties(sectPr, xml) : {} as SectionProperties,\n            cssStyle: background ? this.parseBackground(background) : {},\n        };\n    }\n\n    parseBackground(elem: Element): any {\n        var result = {};\n        var color = xmlUtil.colorAttr(elem, \"color\");\n\n        if (color) {\n            result[\"background-color\"] = color;\n        }\n\n        return result;\n    }\n\n    parseBodyElements(element: Element): OpenXmlElement[] {\n        var children = [];\n\n        for (let elem of xml.elements(element)) {\n            switch (elem.localName) {\n                case \"p\":\n                    children.push(this.parseParagraph(elem));\n                    break;\n\n                case \"tbl\":\n                    children.push(this.parseTable(elem));\n                    break;\n\n                case \"sdt\":\n                    children.push(...this.parseSdt(elem, e => this.parseBodyElements(e)));\n                    break;\n            }\n        }\n\n        return children;\n    }\n\n    parseStylesFile(xstyles: Element): IDomStyle[] {\n        var result = [];\n\n        xmlUtil.foreach(xstyles, n => {\n            switch (n.localName) {\n                case \"style\":\n                    result.push(this.parseStyle(n));\n                    break;\n\n                case \"docDefaults\":\n                    result.push(this.parseDefaultStyles(n));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseDefaultStyles(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: null,\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: []\n        };\n\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"rPrDefault\":\n                    var rPr = xml.element(c, \"rPr\");\n\n                    if (rPr)\n                        result.styles.push({\n                            target: \"span\",\n                            values: this.parseDefaultProperties(rPr, {})\n                        });\n                    break;\n\n                case \"pPrDefault\":\n                    var pPr = xml.element(c, \"pPr\");\n\n                    if (pPr)\n                        result.styles.push({\n                            target: \"p\",\n                            values: this.parseDefaultProperties(pPr, {})\n                        });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseStyle(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: xml.attr(node, \"styleId\"),\n            isDefault: xml.boolAttr(node, \"default\"),\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: [],\n            linked: null\n        };\n\n        switch (xml.attr(node, \"type\")) {\n            case \"paragraph\":\n                result.target = \"p\";\n                break;\n            case \"table\":\n                result.target = \"table\";\n                break;\n            case \"character\":\n                result.target = \"span\";\n                break;\n            //case \"numbering\": result.target = \"p\"; break;\n        }\n\n        xmlUtil.foreach(node, n => {\n            switch (n.localName) {\n                case \"basedOn\":\n                    result.basedOn = xml.attr(n, \"val\");\n                    break;\n\n                case \"name\":\n                    result.name = xml.attr(n, \"val\");\n                    break;\n\n                case \"link\":\n                    result.linked = xml.attr(n, \"val\");\n                    break;\n\n                case \"next\":\n                    result.next = xml.attr(n, \"val\");\n                    break;\n\n                case \"aliases\":\n                    result.aliases = xml.attr(n, \"val\").split(\",\");\n                    break;\n\n                case \"pPr\":\n                    result.styles.push({\n                        target: \"p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.paragraphProps = parseParagraphProperties(n, xml);\n                    break;\n\n                case \"rPr\":\n                    result.styles.push({\n                        target: \"span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.runProps = parseRunProperties(n, xml);\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.styles.push({\n                        target: \"td\", //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblStylePr\":\n                    for (let s of this.parseTableStyle(n))\n                        result.styles.push(s);\n                    break;\n\n                case \"rsid\":\n                case \"qFormat\":\n                case \"hidden\":\n                case \"semiHidden\":\n                case \"unhideWhenUsed\":\n                case \"autoRedefine\":\n                case \"uiPriority\":\n                    //TODO: ignore\n                    break;\n\n                default:\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\n            }\n        });\n\n        return result;\n    }\n\n    parseTableStyle(node: Element): IDomSubStyle[] {\n        var result = [];\n\n        var type = xml.attr(node, \"type\");\n        var selector = \"\";\n        var modificator = \"\";\n\n        switch (type) {\n            case \"firstRow\":\n                modificator = \".first-row\";\n                selector = \"tr.first-row td\";\n                break;\n            case \"lastRow\":\n                modificator = \".last-row\";\n                selector = \"tr.last-row td\";\n                break;\n            case \"firstCol\":\n                modificator = \".first-col\";\n                selector = \"td.first-col\";\n                break;\n            case \"lastCol\":\n                modificator = \".last-col\";\n                selector = \"td.last-col\";\n                break;\n            case \"band1Vert\":\n                modificator = \":not(.no-vband)\";\n                selector = \"td.odd-col\";\n                break;\n            case \"band2Vert\":\n                modificator = \":not(.no-vband)\";\n                selector = \"td.even-col\";\n                break;\n            case \"band1Horz\":\n                modificator = \":not(.no-hband)\";\n                selector = \"tr.odd-row\";\n                break;\n            case \"band2Horz\":\n                modificator = \":not(.no-hband)\";\n                selector = \"tr.even-row\";\n                break;\n            default:\n                return [];\n        }\n\n        xmlUtil.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    result.push({\n                        target: `${selector} p`,\n                        mod: modificator,\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"rPr\":\n                    result.push({\n                        target: `${selector} span`,\n                        mod: modificator,\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.push({\n                        target: selector, //TODO: maybe move to processor\n                        mod: modificator,\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\n        const result = [];\n        const mapping = {};\n        const bullets = [];\n\n        xmlUtil.foreach(xnums, n => {\n            switch (n.localName) {\n                case \"abstractNum\":\n                    result.push(...this.parseAbstractNumbering(n, bullets))\n                    break;\n\n                case \"numPicBullet\":\n                    bullets.push(this.parseNumberingPicBullet(n));\n                    break;\n\n                case \"num\":\n                    const numId = xml.attr(n, \"numId\");\n                    const abstractNumId = xml.elementAttr(n, \"abstractNumId\", \"val\");\n                    // mapping[abstractNumId] = numId;\n                    mapping[numId] = abstractNumId;\n                    break;\n            }\n        });\n\n        // result.forEach(x => x.id = mapping[x.id]);\n        result.forEach(x => {\n            for (let numId in mapping) {\n                if (mapping[numId] === x.id) {\n                    x.id = numId\n                    break\n                }\n            }\n        })\n\n        return result;\n    }\n\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\n        const pict = xml.element(elem, \"pict\");\n        const shape = pict && xml.element(pict, \"shape\");\n        const imagedata = shape && xml.element(shape, \"imagedata\");\n\n        return imagedata ? {\n            id: xml.intAttr(elem, \"numPicBulletId\"),\n            src: xml.attr(imagedata, \"id\"),\n            style: xml.attr(shape, \"style\")\n        } : null;\n    }\n\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\n        const result = [];\n        const id = xml.attr(node, \"abstractNumId\");\n\n        xmlUtil.foreach(node, n => {\n            switch (n.localName) {\n                case \"lvl\":\n                    result.push(this.parseNumberingLevel(id, n, bullets));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\n        const result: IDomNumbering = {\n            id: id,\n            level: xml.intAttr(node, \"ilvl\"),\n            start: 1,\n            pStyleName: undefined,\n            pStyle: {},\n            rStyle: {},\n            suff: \"tab\"\n        };\n\n        xmlUtil.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    this.parseDefaultProperties(n, result.pStyle);\n                    break;\n\n                case \"rPr\":\n                    this.parseDefaultProperties(n, result.rStyle);\n                    break;\n\n                case \"lvlPicBulletId\":\n                    const id = xml.intAttr(n, \"val\");\n                    result.bullet = bullets.find(x => x.id == id);\n                    break;\n\n                case \"lvlText\":\n                    result.levelText = xml.attr(n, \"val\");\n                    break;\n\n                case \"pStyle\":\n                    result.pStyleName = xml.attr(n, \"val\");\n                    break;\n\n                case \"numFmt\":\n                    result.format = xml.attr(n, \"val\");\n                    break;\n\n                case 'start':\n                    result.start = xml.intAttr(n, 'val')\n                    break\n\n                case \"suff\":\n                    result.suff = xml.attr(n, \"val\");\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseSdt(node: Element, parser: Function): OpenXmlElement[] {\n        const sdtContent = xml.element(node, \"sdtContent\");\n        return sdtContent ? parser(sdtContent) : [];\n    }\n\n    parseInserted(node: Element, parentParser: Function): OpenXmlElement {\n        return <OpenXmlElement>{\n            type: DomType.Inserted,\n            children: parentParser(node)?.children ?? []\n        };\n    }\n\n    parseDeleted(node: Element, parentParser: Function): OpenXmlElement {\n        return <OpenXmlElement>{\n            type: DomType.Deleted,\n            children: parentParser(node)?.children ?? []\n        };\n    }\n\n    parseParagraph(node: Element): OpenXmlElement {\n        var result = <WmlParagraph>{type: DomType.Paragraph, children: []};\n\n        for (let el of xml.elements(node)) {\n            switch (el.localName) {\n                case \"pPr\":\n                    this.parseParagraphProperties(el, result);\n                    break;\n\n                case \"r\":\n                    result.children.push(this.parseRun(el, result));\n                    break;\n\n                case \"hyperlink\":\n                    result.children.push(this.parseHyperlink(el, result));\n                    break;\n\n                case \"bookmarkStart\":\n                    result.children.push(parseBookmarkStart(el, xml));\n                    break;\n\n                case \"bookmarkEnd\":\n                    result.children.push(parseBookmarkEnd(el, xml));\n                    break;\n\n                case \"oMath\":\n                case \"oMathPara\":\n                    result.children.push(this.parseMathElement(el));\n                    break;\n\n                case \"sdt\":\n                    result.children.push(...this.parseSdt(el, e => this.parseParagraph(e).children));\n                    break;\n\n                case \"ins\":\n                    result.children.push(this.parseInserted(el, e => this.parseParagraph(e)));\n                    break;\n\n                case \"del\":\n                    result.children.push(this.parseDeleted(el, e => this.parseParagraph(e)));\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseParagraphProperties(elem: Element, paragraph: WmlParagraph) {\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\n            if (parseParagraphProperty(c, paragraph, xml))\n                return true;\n\n            switch (c.localName) {\n                case \"pStyle\":\n                    paragraph.styleName = xml.attr(c, \"val\");\n                    break;\n\n                case \"cnfStyle\":\n                    paragraph.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                case \"framePr\":\n                    this.parseFrame(c, paragraph);\n                    break;\n\n                case \"rPr\":\n                    //TODO ignore\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseFrame(node: Element, paragraph: WmlParagraph) {\n        var dropCap = xml.attr(node, \"dropCap\");\n\n        if (dropCap == \"drop\")\n            paragraph.cssStyle[\"float\"] = \"left\";\n    }\n\n    parseHyperlink(node: Element, parent?: OpenXmlElement): WmlHyperlink {\n        var result: WmlHyperlink = <WmlHyperlink>{type: DomType.Hyperlink, parent: parent, children: []};\n        var anchor = xml.attr(node, \"anchor\");\n        var relId = xml.attr(node, \"id\");\n\n        if (anchor)\n            result.href = \"#\" + anchor;\n\n        if (relId)\n            result.id = relId;\n\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRun(node: Element, parent?: OpenXmlElement): WmlRun {\n        var result: WmlRun = <WmlRun>{type: DomType.Run, parent: parent, children: []};\n\n        xmlUtil.foreach(node, c => {\n            c = this.checkAlternateContent(c);\n\n            switch (c.localName) {\n                case \"t\":\n                    result.children.push(<WmlText>{\n                        type: DomType.Text,\n                        text: c.textContent\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\n                    break;\n\n                case \"delText\":\n                    result.children.push(<WmlText>{\n                        type: DomType.DeletedText,\n                        text: c.textContent\n                    });\n                    break;\n\n                case \"fldSimple\":\n                    result.children.push(<WmlFieldSimple>{\n                        type: DomType.SimpleField,\n                        instruction: xml.attr(c, \"instr\"),\n                        lock: xml.boolAttr(c, \"lock\", false),\n                        dirty: xml.boolAttr(c, \"dirty\", false)\n                    });\n                    break;\n\n                case \"instrText\":\n                    result.fieldRun = true;\n                    result.children.push(<WmlInstructionText>{\n                        type: DomType.Instruction,\n                        text: c.textContent\n                    });\n                    break;\n\n                case \"fldChar\":\n                    result.fieldRun = true;\n                    result.children.push(<WmlFieldChar>{\n                        type: DomType.ComplexField,\n                        charType: xml.attr(c, \"fldCharType\"),\n                        lock: xml.boolAttr(c, \"lock\", false),\n                        dirty: xml.boolAttr(c, \"dirty\", false)\n                    });\n                    break;\n\n                case \"noBreakHyphen\":\n                    result.children.push({type: DomType.NoBreakHyphen});\n                    break;\n\n                case \"br\":\n                    result.children.push(<WmlBreak>{\n                        type: DomType.Break,\n                        break: xml.attr(c, \"type\") || \"textWrapping\"\n                    });\n                    break;\n\n                case \"lastRenderedPageBreak\":\n                    result.children.push(<WmlBreak>{\n                        type: DomType.Break,\n                        break: \"lastRenderedPageBreak\"\n                    });\n                    break;\n\n                case \"sym\":\n                    result.children.push(<WmlSymbol>{\n                        type: DomType.Symbol,\n                        font: xml.attr(c, \"font\"),\n                        char: xml.attr(c, \"char\")\n                    });\n                    break;\n\n                case \"tab\":\n                    result.children.push({type: DomType.Tab});\n                    break;\n\n                case \"footnoteReference\":\n                    result.children.push(<WmlNoteReference>{\n                        type: DomType.FootnoteReference,\n                        id: xml.attr(c, \"id\")\n                    });\n                    break;\n\n                case \"endnoteReference\":\n                    result.children.push(<WmlNoteReference>{\n                        type: DomType.EndnoteReference,\n                        id: xml.attr(c, \"id\")\n                    });\n                    break;\n\n                case \"drawing\":\n                    let d = this.parseDrawing(c);\n\n                    if (d)\n                        result.children = [d];\n                    break;\n\n                case \"pict\":\n                    result.children.push(this.parseVmlPicture(c));\n                    break;\n\n                case \"rPr\":\n                    this.parseRunProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseMathElement(elem: Element): OpenXmlElement {\n        const propsTag = `${elem.localName}Pr`;\n        const result = {type: mmlTagMap[elem.localName], children: []} as OpenXmlElement;\n\n        for (const el of xml.elements(elem)) {\n            const childType = mmlTagMap[el.localName];\n\n            if (childType) {\n                result.children.push(this.parseMathElement(el));\n            } else if (el.localName == \"r\") {\n                var run = this.parseRun(el);\n                run.type = DomType.MmlRun;\n                result.children.push(run);\n            } else if (el.localName == propsTag) {\n                result.props = this.parseMathProperies(el);\n            }\n        }\n\n        return result;\n    }\n\n    parseMathProperies(elem: Element): Record<string, any> {\n        const result: Record<string, any> = {};\n\n        for (const el of xml.elements(elem)) {\n            switch (el.localName) {\n                case \"chr\":\n                    result.char = xml.attr(el, \"val\");\n                    break;\n                case \"degHide\":\n                    result.hideDegree = xml.boolAttr(el, \"val\");\n                    break;\n                case \"begChr\":\n                    result.beginChar = xml.attr(el, \"val\");\n                    break;\n                case \"endChr\":\n                    result.endChar = xml.attr(el, \"val\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseRunProperties(elem: Element, run: WmlRun) {\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\n            switch (c.localName) {\n                case \"rStyle\":\n                    run.styleName = xml.attr(c, \"val\");\n                    break;\n\n                case \"vertAlign\":\n                    run.verticalAlign = values.valueOfVertAlign(c, true);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseVmlPicture(elem: Element): OpenXmlElement {\n        const result = {type: DomType.VmlPicture, children: []};\n\n        for (const el of xml.elements(elem)) {\n            const child = parseVmlElement(el);\n            child && result.children.push(child);\n        }\n\n        return result;\n    }\n\n    checkAlternateContent(elem: Element): Element {\n        if (elem.localName != 'AlternateContent')\n            return elem;\n\n        var choice = xml.element(elem, \"Choice\");\n\n        if (choice) {\n            var requires = xml.attr(choice, \"Requires\");\n            var namespaceURI = elem.lookupNamespaceURI(requires);\n\n            if (supportedNamespaceURIs.includes(namespaceURI))\n                return choice.firstElementChild;\n        }\n\n        return xml.element(elem, \"Fallback\")?.firstElementChild;\n    }\n\n    parseDrawing(node: Element): OpenXmlElement {\n        for (var n of xml.elements(node)) {\n            switch (n.localName) {\n                case \"inline\":\n                case \"anchor\":\n                    return this.parseDrawingWrapper(n);\n            }\n        }\n    }\n\n    parseDrawingWrapper(node: Element): OpenXmlElement {\n        var result = <OpenXmlElement>{type: DomType.Drawing, children: [], cssStyle: {}};\n        var isAnchor = node.localName == \"anchor\";\n\n        //TODO\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\n\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null;\n        let simplePos = xml.boolAttr(node, \"simplePos\");\n\n        let posX = {relative: \"page\", align: \"left\", offset: \"0\"};\n        let posY = {relative: \"page\", align: \"top\", offset: \"0\"};\n\n        for (var n of xml.elements(node)) {\n            switch (n.localName) {\n                case \"simplePos\":\n                    if (simplePos) {\n                        posX.offset = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\n                        posY.offset = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\n                    }\n                    break;\n\n                case \"extent\":\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\n                    break;\n\n                case \"positionH\":\n                case \"positionV\":\n                    if (!simplePos) {\n                        let pos = n.localName == \"positionH\" ? posX : posY;\n                        var alignNode = xml.element(n, \"align\");\n                        var offsetNode = xml.element(n, \"posOffset\");\n\n                        pos.relative = xml.attr(n, \"relativeFrom\") ?? pos.relative;\n\n                        if (alignNode)\n                            pos.align = alignNode.textContent;\n\n                        if (offsetNode)\n                            pos.offset = xmlUtil.sizeValue(offsetNode, LengthUsage.Emu);\n                    }\n                    break;\n\n                case \"wrapTopAndBottom\":\n                    wrapType = \"wrapTopAndBottom\";\n                    break;\n\n                case \"wrapNone\":\n                    wrapType = \"wrapNone\";\n                    break;\n\n                case \"graphic\":\n                    var g = this.parseGraphic(n);\n\n                    if (g)\n                        result.children.push(g);\n                    break;\n            }\n        }\n\n        if (wrapType == \"wrapTopAndBottom\") {\n            result.cssStyle['display'] = 'block';\n\n            if (posX.align) {\n                result.cssStyle['text-align'] = posX.align;\n                result.cssStyle['width'] = \"100%\";\n            }\n        } else if (wrapType == \"wrapNone\") {\n            result.cssStyle['display'] = 'block';\n            result.cssStyle['position'] = 'relative';\n            result.cssStyle[\"width\"] = \"0px\";\n            result.cssStyle[\"height\"] = \"0px\";\n\n            if (posX.offset)\n                result.cssStyle[\"left\"] = posX.offset;\n            if (posY.offset)\n                result.cssStyle[\"top\"] = posY.offset;\n        } else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\n            result.cssStyle[\"float\"] = posX.align;\n        }\n\n        return result;\n    }\n\n    parseGraphic(elem: Element): OpenXmlElement {\n        var graphicData = xml.element(elem, \"graphicData\");\n\n        for (let n of xml.elements(graphicData)) {\n            switch (n.localName) {\n                case \"pic\":\n                    return this.parsePicture(n);\n            }\n        }\n\n        return null;\n    }\n\n    parsePicture(elem: Element): IDomImage {\n        var result = <IDomImage>{type: DomType.Image, src: \"\", cssStyle: {}};\n        var blipFill = xml.element(elem, \"blipFill\");\n        var blip = xml.element(blipFill, \"blip\");\n\n        result.src = xml.attr(blip, \"embed\");\n\n        var spPr = xml.element(elem, \"spPr\");\n        var xfrm = xml.element(spPr, \"xfrm\");\n\n        result.cssStyle[\"position\"] = \"relative\";\n\n        for (var n of xml.elements(xfrm)) {\n            switch (n.localName) {\n                case \"ext\":\n                    result.cssStyle[\"width\"] = xml.lengthAttr(n, \"cx\", LengthUsage.Emu);\n                    result.cssStyle[\"height\"] = xml.lengthAttr(n, \"cy\", LengthUsage.Emu);\n                    break;\n\n                case \"off\":\n                    result.cssStyle[\"left\"] = xml.lengthAttr(n, \"x\", LengthUsage.Emu);\n                    result.cssStyle[\"top\"] = xml.lengthAttr(n, \"y\", LengthUsage.Emu);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseTable(node: Element): WmlTable {\n        var result: WmlTable = {type: DomType.Table, children: []};\n\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"tr\":\n                    result.children.push(this.parseTableRow(c));\n                    break;\n\n                case \"tblGrid\":\n                    result.columns = this.parseTableColumns(c);\n                    break;\n\n                case \"tblPr\":\n                    this.parseTableProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableColumns(node: Element): WmlTableColumn[] {\n        var result = [];\n\n        xmlUtil.foreach(node, n => {\n            switch (n.localName) {\n                case \"gridCol\":\n                    result.push({width: xml.lengthAttr(n, \"w\")});\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableProperties(elem: Element, table: WmlTable) {\n        table.cssStyle = {};\n        table.cellStyle = {};\n\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\n            switch (c.localName) {\n                case \"tblStyle\":\n                    table.styleName = xml.attr(c, \"val\");\n                    break;\n\n                case \"tblLook\":\n                    table.className = values.classNameOftblLook(c);\n                    break;\n\n                case \"tblpPr\":\n                    this.parseTablePosition(c, table);\n                    break;\n\n                case \"tblStyleColBandSize\":\n                    table.colBandSize = xml.intAttr(c, \"val\");\n                    break;\n\n                case \"tblStyleRowBandSize\":\n                    table.rowBandSize = xml.intAttr(c, \"val\");\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n\n        switch (table.cssStyle[\"text-align\"]) {\n            case \"center\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                table.cssStyle[\"margin-right\"] = \"auto\";\n                break;\n\n            case \"right\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                break;\n        }\n    }\n\n    parseTablePosition(node: Element, table: WmlTable) {\n        var topFromText = xml.lengthAttr(node, \"topFromText\");\n        var bottomFromText = xml.lengthAttr(node, \"bottomFromText\");\n        var rightFromText = xml.lengthAttr(node, \"rightFromText\");\n        var leftFromText = xml.lengthAttr(node, \"leftFromText\");\n\n        table.cssStyle[\"float\"] = 'left';\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\n    }\n\n    parseTableRow(node: Element): WmlTableRow {\n        var result: WmlTableRow = {type: DomType.Row, children: []};\n\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"tc\":\n                    result.children.push(this.parseTableCell(c));\n                    break;\n\n                case \"trPr\":\n                    this.parseTableRowProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableRowProperties(elem: Element, row: WmlTableRow) {\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"cnfStyle\":\n                    row.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                case \"tblHeader\":\n                    row.isHeader = xml.boolAttr(c, \"val\");\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseTableCell(node: Element): OpenXmlElement {\n        var result: WmlTableCell = {type: DomType.Cell, children: []};\n\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"tbl\":\n                    result.children.push(this.parseTable(c));\n                    break;\n\n                case \"p\":\n                    result.children.push(this.parseParagraph(c));\n                    break;\n\n                case \"tcPr\":\n                    this.parseTableCellProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableCellProperties(elem: Element, cell: WmlTableCell) {\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"gridSpan\":\n                    cell.span = xml.intAttr(c, \"val\", null);\n                    break;\n\n                case \"vMerge\":\n                    cell.verticalMerge = xml.attr(c, \"val\") ?? \"continue\";\n                    break;\n\n                case \"cnfStyle\":\n                    cell.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\n        style = style || {};\n\n        xmlUtil.foreach(elem, c => {\n            if (handler?.(c))\n                return;\n\n            switch (c.localName) {\n                case \"jc\":\n                    style[\"text-align\"] = values.valueOfJc(c);\n                    break;\n\n                case \"textAlignment\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"color\":\n                    style[\"color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.color);\n                    break;\n\n                case \"sz\":\n                    style[\"font-size\"] = style[\"min-height\"] = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\n                    break;\n\n                case \"shd\":\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"fill\", null, autos.shd);\n                    break;\n\n                case \"highlight\":\n                    style[\"background-color\"] = xmlUtil.colorAttr(c, \"val\", null, autos.highlight);\n                    break;\n\n                case \"vertAlign\":\n                    //TODO\n                    // style.verticalAlign = values.valueOfVertAlign(c);\n                    break;\n\n                case \"position\":\n                    style.verticalAlign = xml.lengthAttr(c, \"val\", LengthUsage.FontSize);\n                    break;\n\n                case \"tcW\":\n                    if (this.options.ignoreWidth)\n                        break;\n\n                case \"tblW\":\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\n                    break;\n\n                case \"trHeight\":\n                    this.parseTrHeight(c, style);\n                    break;\n\n                case \"strike\":\n                    style[\"text-decoration\"] = xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\n                    break;\n\n                case \"b\":\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\n                    break;\n\n                case \"i\":\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\n                    break;\n\n                case \"caps\":\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\n                    break;\n\n                case \"smallCaps\":\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\n                    break;\n\n                case \"u\":\n                    this.parseUnderline(c, style);\n                    break;\n\n                case \"ind\":\n                case \"tblInd\":\n                    this.parseIndentation(c, style);\n                    break;\n\n                case \"rFonts\":\n                    this.parseFont(c, style);\n                    break;\n\n                case \"tblBorders\":\n                    this.parseBorderProperties(c, childStyle || style);\n                    break;\n\n                case \"tblCellSpacing\":\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\n                    style[\"border-collapse\"] = \"separate\";\n                    break;\n\n                case \"pBdr\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"bdr\":\n                    style[\"border\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"tcBorders\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"vanish\":\n                    if (xml.boolAttr(c, \"val\", true))\n                        style[\"display\"] = \"none\";\n                    break;\n\n                case \"kern\":\n                    //TODO\n                    //style['letter-spacing'] = xml.lengthAttr(elem, 'val', LengthUsage.FontSize);\n                    break;\n\n                case \"noWrap\":\n                    //TODO\n                    //style[\"white-space\"] = \"nowrap\";\n                    break;\n\n                case \"tblCellMar\":\n                case \"tcMar\":\n                    this.parseMarginProperties(c, childStyle || style);\n                    break;\n\n                case \"tblLayout\":\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\n                    break;\n\n                case \"vAlign\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"spacing\":\n                    if (elem.localName == \"pPr\")\n                        this.parseSpacing(c, style);\n                    break;\n\n                case \"wordWrap\":\n                    if (xml.boolAttr(c, \"val\")) //TODO: test with examples\n                        style[\"overflow-wrap\"] = \"break-word\";\n                    break;\n\n                case \"bCs\":\n                case \"iCs\":\n                case \"szCs\":\n                case \"tabs\": //ignore - tabs is parsed by other parser\n                case \"outlineLvl\": //TODO\n                case \"contextualSpacing\": //TODO\n                case \"tblStyleColBandSize\": //TODO\n                case \"tblStyleRowBandSize\": //TODO\n                case \"webHidden\": //TODO - maybe web-hidden should be implemented\n                case \"pageBreakBefore\": //TODO - maybe ignore \n                case \"suppressLineNumbers\": //TODO - maybe ignore\n                case \"keepLines\": //TODO - maybe ignore\n                case \"keepNext\": //TODO - maybe ignore\n                case \"lang\":\n                case \"widowControl\": //TODO - maybe ignore \n                case \"bidi\": //TODO - maybe ignore\n                case \"rtl\": //TODO - maybe ignore\n                case \"noProof\": //ignore spellcheck\n                    //TODO ignore\n                    break;\n\n                default:\n                    if (this.options.debug)\n                        console.warn(`DOCX: Unknown document element: ${elem.localName}.${c.localName}`);\n                    break;\n            }\n        });\n\n        return style;\n    }\n\n    parseUnderline(node: Element, style: Record<string, string>) {\n        var val = xml.attr(node, \"val\");\n\n        if (val == null)\n            return;\n\n        switch (val) {\n            case \"dash\":\n            case \"dashDotDotHeavy\":\n            case \"dashDotHeavy\":\n            case \"dashedHeavy\":\n            case \"dashLong\":\n            case \"dashLongHeavy\":\n            case \"dotDash\":\n            case \"dotDotDash\":\n                style[\"text-decoration-style\"] = \"dashed\";\n                break;\n\n            case \"dotted\":\n            case \"dottedHeavy\":\n                style[\"text-decoration-style\"] = \"dotted\";\n                break;\n\n            case \"double\":\n                style[\"text-decoration-style\"] = \"double\";\n                break;\n\n            case \"single\":\n            case \"thick\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"wave\":\n            case \"wavyDouble\":\n            case \"wavyHeavy\":\n                style[\"text-decoration-style\"] = \"wavy\";\n                break;\n\n            case \"words\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"none\":\n                style[\"text-decoration\"] = \"none\";\n                break;\n        }\n\n        var col = xmlUtil.colorAttr(node, \"color\");\n\n        if (col)\n            style[\"text-decoration-color\"] = col;\n    }\n\n    parseFont(node: Element, style: Record<string, string>) {\n        var ascii = xml.attr(node, \"ascii\");\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\n\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\n\n        if (fonts.length > 0)\n            style[\"font-family\"] = fonts;\n    }\n\n    parseIndentation(node: Element, style: Record<string, string>) {\n        var firstLine = xml.lengthAttr(node, \"firstLine\");\n        var hanging = xml.lengthAttr(node, \"hanging\");\n        var left = xml.lengthAttr(node, \"left\");\n        var start = xml.lengthAttr(node, \"start\");\n        var right = xml.lengthAttr(node, \"right\");\n        var end = xml.lengthAttr(node, \"end\");\n\n        if (firstLine) style[\"text-indent\"] = firstLine;\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\n        if (left || start) style[\"margin-left\"] = left || start;\n        if (right || end) style[\"margin-right\"] = right || end;\n    }\n\n    parseSpacing(node: Element, style: Record<string, string>) {\n        var before = xml.lengthAttr(node, \"before\");\n        var after = xml.lengthAttr(node, \"after\");\n        var line = xml.intAttr(node, \"line\", null);\n        var lineRule = xml.attr(node, \"lineRule\");\n\n        if (before) style[\"margin-top\"] = before;\n        if (after) style[\"margin-bottom\"] = after;\n\n        if (line !== null) {\n            switch (lineRule) {\n                case \"auto\":\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\n                    break;\n\n                case \"atLeast\":\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\n                    break;\n\n                default:\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\n                    break;\n            }\n        }\n    }\n\n    parseMarginProperties(node: Element, output: Record<string, string>) {\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"left\":\n                    output[\"padding-left\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"right\":\n                    output[\"padding-right\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"top\":\n                    output[\"padding-top\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\n                    break;\n            }\n        });\n    }\n\n    parseTrHeight(node: Element, output: Record<string, string>) {\n        switch (xml.attr(node, \"hRule\")) {\n            case \"exact\":\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\n                break;\n\n            case \"atLeast\":\n            default:\n                output[\"height\"] = xml.lengthAttr(node, \"val\");\n                // min-height doesn't work for tr\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \n                break;\n        }\n    }\n\n    parseBorderProperties(node: Element, output: Record<string, string>) {\n        xmlUtil.foreach(node, c => {\n            switch (c.localName) {\n                case \"start\":\n                case \"left\":\n                    output[\"border-left\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"end\":\n                case \"right\":\n                    output[\"border-right\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"top\":\n                    output[\"border-top\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\n                    break;\n            }\n        });\n    }\n}\n\nconst knownColors = ['black', 'blue', 'cyan', 'darkBlue', 'darkCyan', 'darkGray', 'darkGreen', 'darkMagenta', 'darkRed', 'darkYellow', 'green', 'lightGray', 'magenta', 'none', 'red', 'white', 'yellow'];\n\nclass xmlUtil {\n    static foreach(node: Element, cb: (n: Element) => void) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n            let n = node.childNodes[i];\n\n            if (n.nodeType == Node.ELEMENT_NODE)\n                cb(<Element>n);\n        }\n    }\n\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\n        var v = xml.attr(node, attrName);\n\n        if (v) {\n            if (v == \"auto\") {\n                return autoColor;\n            } else if (knownColors.includes(v)) {\n                return v;\n            }\n\n            return `#${v}`;\n        }\n\n        var themeColor = xml.attr(node, \"themeColor\");\n\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\n    }\n\n    static sizeValue(node: Element, type: LengthUsageType = LengthUsage.Dxa) {\n        return convertLength(node.textContent, type);\n    }\n}\n\nclass values {\n    static themeValue(c: Element, attr: string) {\n        var val = xml.attr(c, attr);\n        return val ? `var(--docx-${val}-font)` : null;\n    }\n\n    static valueOfSize(c: Element, attr: string) {\n        var type = LengthUsage.Dxa;\n\n        switch (xml.attr(c, \"type\")) {\n            case \"dxa\":\n                break;\n            case \"pct\":\n                type = LengthUsage.Percent;\n                break;\n            case \"auto\":\n                return \"auto\";\n        }\n\n        return xml.lengthAttr(c, attr, type);\n    }\n\n    static valueOfMargin(c: Element) {\n        return xml.lengthAttr(c, \"w\");\n    }\n\n    static valueOfBorder(c: Element) {\n        var type = xml.attr(c, \"val\");\n\n        if (type == \"nil\")\n            return \"none\";\n\n        var color = xmlUtil.colorAttr(c, \"color\");\n        var size = xml.lengthAttr(c, \"sz\", LengthUsage.Border);\n\n        return `${size} solid ${color == \"auto\" ? autos.borderColor : color}`;\n    }\n\n    static valueOfTblLayout(c: Element) {\n        var type = xml.attr(c, \"val\");\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\n    }\n\n    static classNameOfCnfStyle(c: Element) {\n        const val = xml.attr(c, \"val\");\n        const classes = [\n            'first-row', 'last-row', 'first-col', 'last-col',\n            'odd-col', 'even-col', 'odd-row', 'even-row',\n            'ne-cell', 'nw-cell', 'se-cell', 'sw-cell'\n        ];\n\n        return classes.filter((_, i) => val[i] == '1').join(' ');\n    }\n\n    static valueOfJc(c: Element) {\n        var type = xml.attr(c, \"val\");\n\n        switch (type) {\n            case \"start\":\n            case \"left\":\n                return \"left\";\n            case \"center\":\n                return \"center\";\n            case \"end\":\n            case \"right\":\n                return \"right\";\n            case \"both\":\n                return \"justify\";\n        }\n\n        return type;\n    }\n\n    static valueOfVertAlign(c: Element, asTagName: boolean = false) {\n        var type = xml.attr(c, \"val\");\n\n        switch (type) {\n            case \"subscript\":\n                return \"sub\";\n            case \"superscript\":\n                return asTagName ? \"sup\" : \"super\";\n        }\n\n        return asTagName ? null : type;\n    }\n\n    static valueOfTextAlignment(c: Element) {\n        var type = xml.attr(c, \"val\");\n\n        switch (type) {\n            case \"auto\":\n            case \"baseline\":\n                return \"baseline\";\n            case \"top\":\n                return \"top\";\n            case \"center\":\n                return \"middle\";\n            case \"bottom\":\n                return \"bottom\";\n        }\n\n        return type;\n    }\n\n    static addSize(a: string, b: string): string {\n        if (a == null) return b;\n        if (b == null) return a;\n\n        return `calc(${a} + ${b})`; //TODO\n    }\n\n    static classNameOftblLook(c: Element) {\n        const val = xml.hexAttr(c, \"val\", 0);\n        let className = \"\";\n\n        if (xml.boolAttr(c, \"firstRow\") || (val & 0x0020)) className += \" first-row\";\n        if (xml.boolAttr(c, \"lastRow\") || (val & 0x0040)) className += \" last-row\";\n        if (xml.boolAttr(c, \"firstColumn\") || (val & 0x0080)) className += \" first-col\";\n        if (xml.boolAttr(c, \"lastColumn\") || (val & 0x0100)) className += \" last-col\";\n        if (xml.boolAttr(c, \"noHBand\") || (val & 0x0200)) className += \" no-hband\";\n        if (xml.boolAttr(c, \"noVBand\") || (val & 0x0400)) className += \" no-vband\";\n\n        return className.trim();\n    }\n}\n","import {Part} from \"../common/part\";\nimport {CorePropsDeclaration, parseCoreProps} from \"./core-props\";\n\nexport class CorePropsPart extends Part {\n    props: CorePropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseCoreProps(root, this._package.xmlParser);\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport interface CorePropsDeclaration {\n    title: string,\n    description: string,\n    subject: string,\n    creator: string,\n    keywords: string,\n    language: string,\n    lastModifiedBy: string,\n    revision: number,\n}\n\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\n    const result = <CorePropsDeclaration>{};\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"title\":\n                result.title = el.textContent;\n                break;\n            case \"description\":\n                result.description = el.textContent;\n                break;\n            case \"subject\":\n                result.subject = el.textContent;\n                break;\n            case \"creator\":\n                result.creator = el.textContent;\n                break;\n            case \"keywords\":\n                result.keywords = el.textContent;\n                break;\n            case \"language\":\n                result.language = el.textContent;\n                break;\n            case \"lastModifiedBy\":\n                result.lastModifiedBy = el.textContent;\n                break;\n            case \"revision\":\n                el.textContent && (result.revision = parseInt(el.textContent));\n                break;\n        }\n    }\n\n    return result;\n}","import {Part} from \"../common/part\";\nimport {CustomProperty, parseCustomProps} from \"./custom-props\";\n\nexport class CustomPropsPart extends Part {\n    props: CustomProperty[];\n\n    parseXml(root: Element) {\n        this.props = parseCustomProps(root, this._package.xmlParser);\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport interface CustomProperty {\n    formatId: string;\n    name: string;\n    type: string;\n    value: string;\n}\n\nexport function parseCustomProps(root: Element, xml: XmlParser): CustomProperty[] {\n    return xml.elements(root, \"property\").map(e => {\n        const firstChild = e.firstChild;\n\n        return {\n            formatId: xml.attr(e, \"fmtid\"),\n            name: xml.attr(e, \"name\"),\n            type: firstChild.nodeName,\n            value: firstChild.textContent\n        };\n    });\n}","import {Part} from \"../common/part\";\nimport {ExtendedPropsDeclaration, parseExtendedProps} from \"./extended-props\";\n\nexport class ExtendedPropsPart extends Part {\n    props: ExtendedPropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseExtendedProps(root, this._package.xmlParser);\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport interface ExtendedPropsDeclaration {\n    template: string,\n    totalTime: number,\n    pages: number,\n    words: number,\n    characters: number,\n    application: string,\n    lines: number,\n    paragraphs: number,\n    company: string,\n    appVersion: string\n}\n\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\n    const result = <ExtendedPropsDeclaration>{};\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"Template\":\n                result.template = el.textContent;\n                break;\n            case \"Pages\":\n                result.pages = safeParseToInt(el.textContent);\n                break;\n            case \"Words\":\n                result.words = safeParseToInt(el.textContent);\n                break;\n            case \"Characters\":\n                result.characters = safeParseToInt(el.textContent);\n                break;\n            case \"Application\":\n                result.application = el.textContent;\n                break;\n            case \"Lines\":\n                result.lines = safeParseToInt(el.textContent);\n                break;\n            case \"Paragraphs\":\n                result.paragraphs = safeParseToInt(el.textContent);\n                break;\n            case \"Company\":\n                result.company = el.textContent;\n                break;\n            case \"AppVersion\":\n                result.appVersion = el.textContent;\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction safeParseToInt(value: string): number {\n    if (typeof value === 'undefined')\n        return;\n    return parseInt(value);\n}","import {XmlParser} from \"../parser/xml-parser\";\nimport {DomType, OpenXmlElement} from \"./dom\";\n\nexport interface WmlBookmarkStart extends OpenXmlElement {\n    id: string;\n    name: string;\n    colFirst: number;\n    colLast: number;\n}\n\nexport interface WmlBookmarkEnd extends OpenXmlElement {\n    id: string;\n}\n\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): WmlBookmarkStart {\n    return {\n        type: DomType.BookmarkStart,\n        id: xml.attr(elem, \"id\"),\n        name: xml.attr(elem, \"name\"),\n        colFirst: xml.intAttr(elem, \"colFirst\"),\n        colLast: xml.intAttr(elem, \"colLast\")\n    }\n}\n\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): WmlBookmarkEnd {\n    return {\n        type: DomType.BookmarkEnd,\n        id: xml.attr(elem, \"id\")\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\nimport {Length, LengthUsage} from \"./common\";\n\nexport interface Border {\n    color: string;\n    type: string;\n    size: Length;\n    frame: boolean;\n    shadow: boolean;\n    offset: Length;\n}\n\nexport interface Borders {\n    top: Border;\n    left: Border;\n    right: Border;\n    bottom: Border;\n}\n\nexport function parseBorder(elem: Element, xml: XmlParser): Border {\n    return {\n        type: xml.attr(elem, \"val\"),\n        color: xml.attr(elem, \"color\"),\n        size: xml.lengthAttr(elem, \"sz\", LengthUsage.Border),\n        offset: xml.lengthAttr(elem, \"space\", LengthUsage.Point),\n        frame: xml.boolAttr(elem, 'frame'),\n        shadow: xml.boolAttr(elem, 'shadow')\n    };\n}\n\nexport function parseBorders(elem: Element, xml: XmlParser): Borders {\n    var result = <Borders>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"left\":\n                result.left = parseBorder(e, xml);\n                break;\n            case \"top\":\n                result.top = parseBorder(e, xml);\n                break;\n            case \"right\":\n                result.right = parseBorder(e, xml);\n                break;\n            case \"bottom\":\n                result.bottom = parseBorder(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport const ns = {\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\",\n    compatibility: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n    math: \"http://schemas.openxmlformats.org/officeDocument/2006/math\"\n}\n\nexport type LengthType = \"px\" | \"pt\" | \"%\" | \"\";\nexport type Length = string;\n\nexport interface Font {\n    name: string;\n    family: string;\n}\n\nexport interface CommonProperties {\n    fontSize: Length;\n    color: string;\n}\n\nexport type LengthUsageType = { mul: number, unit: LengthType };\n\nexport const LengthUsage: Record<string, LengthUsageType> = {\n    Dxa: {mul: 0.05, unit: \"pt\"}, //twips\n    Emu: {mul: 1 / 12700, unit: \"pt\"},\n    FontSize: {mul: 0.5, unit: \"pt\"},\n    Border: {mul: 0.125, unit: \"pt\"},\n    Point: {mul: 1, unit: \"pt\"},\n    Percent: {mul: 0.02, unit: \"%\"},\n    LineHeight: {mul: 1 / 240, unit: \"\"},\n    VmlEmu: {mul: 1 / 12700, unit: \"\"},\n}\n\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): string {\n    //\"simplified\" docx documents use pt's as units\n    if (val == null || /.+(p[xt]|[%])$/.test(val)) {\n        return val;\n    }\n\n    return `${(parseInt(val) * usage.mul).toFixed(2)}${usage.unit}`;\n}\n\nexport function convertBoolean(v: string, defaultValue = false): boolean {\n    switch (v) {\n        case \"1\":\n            return true;\n        case \"0\":\n            return false;\n        case \"on\":\n            return true;\n        case \"off\":\n            return false;\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            return defaultValue;\n    }\n}\n\nexport function convertPercentage(val: string): number {\n    return val ? parseInt(val) / 100 : null;\n}\n\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\n    if (elem.namespaceURI != ns.wordml)\n        return false;\n\n    switch (elem.localName) {\n        case \"color\":\n            props.color = xml.attr(elem, \"val\");\n            break;\n\n        case \"sz\":\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\n            break;\n\n        default:\n            return false;\n    }\n\n    return true;\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DocumentParser} from \"../document-parser\";\nimport {DocumentElement} from \"./document\";\n\nexport class DocumentPart extends Part {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    body: DocumentElement\n\n    parseXml(root: Element) {\n        this.body = this._documentParser.parseDocumentFile(root);\n    }\n}","export enum DomType {\n    Document = \"document\",\n    Paragraph = \"paragraph\",\n    Run = \"run\",\n    Break = \"break\",\n    NoBreakHyphen = \"noBreakHyphen\",\n    Table = \"table\",\n    Row = \"row\",\n    Cell = \"cell\",\n    Hyperlink = \"hyperlink\",\n    Drawing = \"drawing\",\n    Image = \"image\",\n    Text = \"text\",\n    Tab = \"tab\",\n    Symbol = \"symbol\",\n    BookmarkStart = \"bookmarkStart\",\n    BookmarkEnd = \"bookmarkEnd\",\n    Footer = \"footer\",\n    Header = \"header\",\n    FootnoteReference = \"footnoteReference\",\n    EndnoteReference = \"endnoteReference\",\n    Footnote = \"footnote\",\n    Endnote = \"endnote\",\n    SimpleField = \"simpleField\",\n    ComplexField = \"complexField\",\n    Instruction = \"instruction\",\n    VmlPicture = \"vmlPicture\",\n    MmlMath = \"mmlMath\",\n    MmlMathParagraph = \"mmlMathParagraph\",\n    MmlFraction = \"mmlFraction\",\n    MmlNumerator = \"mmlNumerator\",\n    MmlDenominator = \"mmlDenominator\",\n    MmlRadical = \"mmlRadical\",\n    MmlBase = \"mmlBase\",\n    MmlDegree = \"mmlDegree\",\n    MmlSuperscript = \"mmlSuperscript\",\n    MmlSubscript = \"mmlSubscript\",\n    MmlSubArgument = \"mmlSubArgument\",\n    MmlSuperArgument = \"mmlSuperArgument\",\n    MmlNary = \"mmlNary\",\n    MmlDelimiter = \"mmlDelimiter\",\n    MmlRun = \"mmlRun\",\n    VmlElement = \"vmlElement\",\n    Inserted = \"inserted\",\n    Deleted = \"deleted\",\n    DeletedText = \"deletedText\"\n}\n\nexport interface OpenXmlElement {\n    type: DomType;\n    children?: OpenXmlElement[];\n    cssStyle?: Record<string, string>;\n    props?: Record<string, any>;\n\n    styleName?: string; //style name\n    className?: string; //class mods\n\n    parent?: OpenXmlElement;\n}\n\nexport interface WmlHyperlink extends OpenXmlElement {\n    id?: string;\n    href?: string;\n}\n\nexport interface WmlNoteReference extends OpenXmlElement {\n    id: string;\n}\n\nexport interface WmlBreak extends OpenXmlElement {\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\n}\n\nexport interface WmlText extends OpenXmlElement {\n    text: string;\n}\n\nexport interface WmlSymbol extends OpenXmlElement {\n    font: string;\n    char: string;\n}\n\nexport interface WmlTable extends OpenXmlElement {\n    columns?: WmlTableColumn[];\n    cellStyle?: Record<string, string>;\n\n    colBandSize?: number;\n    rowBandSize?: number;\n}\n\nexport interface WmlTableRow extends OpenXmlElement {\n    isHeader?: boolean;\n}\n\nexport interface WmlTableCell extends OpenXmlElement {\n    verticalMerge?: 'restart' | 'continue' | string;\n    span?: number;\n}\n\nexport interface IDomImage extends OpenXmlElement {\n    src: string;\n}\n\nexport interface WmlTableColumn {\n    width?: string;\n}\n\nexport interface IDomNumbering {\n    id: string;\n    level: number;\n    start: number;\n    pStyleName: string;\n    pStyle: Record<string, string>;\n    rStyle: Record<string, string>;\n    levelText?: string;\n    suff: string;\n    format?: string;\n    bullet?: NumberingPicBullet;\n}\n\nexport interface NumberingPicBullet {\n    id: number;\n    src: string;\n    style?: string;\n}\n","import {XmlParser} from \"../parser/xml-parser\";\nimport {Length} from \"./common\";\n\nexport interface LineSpacing {\n    after: Length;\n    before: Length;\n    line: number;\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\n}\n\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\n    return {\n        before: xml.lengthAttr(elem, \"before\"),\n        after: xml.lengthAttr(elem, \"after\"),\n        line: xml.intAttr(elem, \"line\"),\n        lineRule: xml.attr(elem, \"lineRule\")\n    } as LineSpacing;\n}","import {OpenXmlElement} from \"./dom\";\nimport {CommonProperties, Length, ns, parseCommonProperty} from \"./common\";\nimport {Borders} from \"./border\";\nimport {parseSectionProperties, SectionProperties} from \"./section\";\nimport {LineSpacing, parseLineSpacing} from \"./line-spacing\";\nimport {XmlParser} from \"../parser/xml-parser\";\nimport {parseRunProperties, RunProperties} from \"./run\";\n\nexport interface WmlParagraph extends OpenXmlElement, ParagraphProperties {\n}\n\nexport interface ParagraphProperties extends CommonProperties {\n    sectionProps: SectionProperties;\n    tabs: ParagraphTab[];\n    numbering: ParagraphNumbering;\n\n    border: Borders;\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\n    lineSpacing: LineSpacing;\n    keepLines: boolean;\n    keepNext: boolean;\n    pageBreakBefore: boolean;\n    outlineLevel: number;\n    styleName?: string;\n\n    runProps: RunProperties;\n}\n\nexport interface ParagraphTab {\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\n    position: Length;\n}\n\nexport interface ParagraphNumbering {\n    id: string;\n    level: number;\n}\n\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\n    let result = <ParagraphProperties>{};\n\n    for (let el of xml.elements(elem)) {\n        parseParagraphProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\n    if (elem.namespaceURI != ns.wordml)\n        return false;\n\n    if (parseCommonProperty(elem, props, xml))\n        return true;\n\n    switch (elem.localName) {\n        case \"tabs\":\n            props.tabs = parseTabs(elem, xml);\n            break;\n\n        case \"sectPr\":\n            props.sectionProps = parseSectionProperties(elem, xml);\n            break;\n\n        case \"numPr\":\n            props.numbering = parseNumbering(elem, xml);\n            break;\n\n        case \"spacing\":\n            props.lineSpacing = parseLineSpacing(elem, xml);\n            return false; // TODO\n            break;\n\n        case \"textAlignment\":\n            props.textAlignment = xml.attr(elem, \"val\");\n            return false; //TODO\n            break;\n\n        case \"keepNext\":\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\n            break;\n\n        case \"keepNext\":\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\n            break;\n\n        case \"pageBreakBefore\":\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\n            break;\n\n        case \"outlineLvl\":\n            props.outlineLevel = xml.intAttr(elem, \"val\");\n            break;\n\n        case \"pStyle\":\n            props.styleName = xml.attr(elem, \"val\");\n            break;\n\n        case \"rPr\":\n            props.runProps = parseRunProperties(elem, xml);\n            break;\n\n        default:\n            return false;\n    }\n\n    return true;\n}\n\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\n    return xml.elements(elem, \"tab\")\n        .map(e => <ParagraphTab>{\n            position: xml.lengthAttr(e, \"pos\"),\n            leader: xml.attr(e, \"leader\"),\n            style: xml.attr(e, \"val\")\n        });\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\n    var result = <ParagraphNumbering>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"numId\":\n                result.id = xml.attr(e, \"val\");\n                break;\n\n            case \"ilvl\":\n                result.level = xml.intAttr(e, \"val\");\n                break;\n        }\n    }\n\n    return result;\n}","import {XmlParser} from \"../parser/xml-parser\";\nimport {CommonProperties, parseCommonProperty} from \"./common\";\nimport {OpenXmlElement} from \"./dom\";\n\nexport interface WmlRun extends OpenXmlElement, RunProperties {\n    id?: string;\n    verticalAlign?: string;\n    fieldRun?: boolean;\n}\n\nexport interface RunProperties extends CommonProperties {\n\n}\n\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\n    let result = <RunProperties>{};\n\n    for (let el of xml.elements(elem)) {\n        parseRunProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\n    if (parseCommonProperty(elem, props, xml))\n        return true;\n\n    return false;\n}","import globalXmlParser, {XmlParser} from \"../parser/xml-parser\";\nimport {Borders, parseBorders} from \"./border\";\nimport {Length} from \"./common\";\n\nexport interface Column {\n    space: Length;\n    width: Length;\n}\n\nexport interface Columns {\n    space: Length;\n    numberOfColumns: number;\n    separator: boolean;\n    equalWidth: boolean;\n    columns: Column[];\n}\n\nexport interface PageSize {\n    width: Length,\n    height: Length,\n    orientation: \"landscape\" | string\n}\n\nexport interface PageNumber {\n    start: number;\n    chapSep: \"colon\" | \"emDash\" | \"endash\" | \"hyphen\" | \"period\" | string;\n    chapStyle: string;\n    format: \"none\" | \"cardinalText\" | \"decimal\" | \"decimalEnclosedCircle\" | \"decimalEnclosedFullstop\"\n        | \"decimalEnclosedParen\" | \"decimalZero\" | \"lowerLetter\" | \"lowerRoman\"\n        | \"ordinalText\" | \"upperLetter\" | \"upperRoman\" | string;\n}\n\nexport interface PageMargins {\n    top: Length;\n    right: Length;\n    bottom: Length;\n    left: Length;\n    header: Length;\n    footer: Length;\n    gutter: Length;\n}\n\nexport enum SectionType {\n    Continuous = \"continuous\",\n    NextPage = \"nextPage\",\n    NextColumn = \"nextColumn\",\n    EvenPage = \"evenPage\",\n    OddPage = \"oddPage\",\n}\n\nexport interface FooterHeaderReference {\n    id: string;\n    type: string | \"first\" | \"even\" | \"default\";\n}\n\nexport interface SectionProperties {\n    type: SectionType | string;\n    pageSize: PageSize,\n    pageMargins: PageMargins,\n    pageBorders: Borders;\n    pageNumber: PageNumber;\n    columns: Columns;\n    footerRefs: FooterHeaderReference[];\n    headerRefs: FooterHeaderReference[];\n    titlePage: boolean;\n}\n\nexport function parseSectionProperties(elem: Element, xml: XmlParser = globalXmlParser): SectionProperties {\n    var section = <SectionProperties>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"pgSz\":\n                section.pageSize = {\n                    width: xml.lengthAttr(e, \"w\"),\n                    height: xml.lengthAttr(e, \"h\"),\n                    orientation: xml.attr(e, \"orient\")\n                }\n                break;\n\n            case \"type\":\n                section.type = xml.attr(e, \"val\");\n                break;\n\n            case \"pgMar\":\n                section.pageMargins = {\n                    left: xml.lengthAttr(e, \"left\"),\n                    right: xml.lengthAttr(e, \"right\"),\n                    top: xml.lengthAttr(e, \"top\"),\n                    bottom: xml.lengthAttr(e, \"bottom\"),\n                    header: xml.lengthAttr(e, \"header\"),\n                    footer: xml.lengthAttr(e, \"footer\"),\n                    gutter: xml.lengthAttr(e, \"gutter\"),\n                };\n                break;\n\n            case \"cols\":\n                section.columns = parseColumns(e, xml);\n                break;\n\n            case \"headerReference\":\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml));\n                break;\n\n            case \"footerReference\":\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml));\n                break;\n\n            case \"titlePg\":\n                section.titlePage = xml.boolAttr(e, \"val\", true);\n                break;\n\n            case \"pgBorders\":\n                section.pageBorders = parseBorders(e, xml);\n                break;\n\n            case \"pgNumType\":\n                section.pageNumber = parsePageNumber(e, xml);\n                break;\n        }\n    }\n\n    return section;\n}\n\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\n    return {\n        numberOfColumns: xml.intAttr(elem, \"num\"),\n        space: xml.lengthAttr(elem, \"space\"),\n        separator: xml.boolAttr(elem, \"sep\"),\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\n        columns: xml.elements(elem, \"col\")\n            .map(e => <Column>{\n                width: xml.lengthAttr(e, \"w\"),\n                space: xml.lengthAttr(e, \"space\")\n            })\n    };\n}\n\nfunction parsePageNumber(elem: Element, xml: XmlParser): PageNumber {\n    return {\n        chapSep: xml.attr(elem, \"chapSep\"),\n        chapStyle: xml.attr(elem, \"chapStyle\"),\n        format: xml.attr(elem, \"fmt\"),\n        start: xml.intAttr(elem, \"start\")\n    };\n}\n\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\n    return {\n        id: xml.attr(elem, \"id\"),\n        type: xml.attr(elem, \"type\"),\n    }\n}","import {WordDocument} from './word-document';\nimport {DocumentParser} from './document-parser';\nimport {HtmlRenderer} from './html-renderer';\n\nexport interface Options {\n    inWrapper: boolean;\n    ignoreWidth: boolean;\n    ignoreHeight: boolean;\n    ignoreFonts: boolean;\n    breakPages: boolean;\n    debug: boolean;\n    experimental: boolean;\n    className: string;\n    trimXmlDeclaration: boolean;\n    renderHeaders: boolean;\n    renderFooters: boolean;\n    renderFootnotes: boolean;\n    renderEndnotes: boolean;\n    ignoreLastRenderedPageBreak: boolean;\n    useBase64URL: boolean;\n    useMathMLPolyfill: boolean;\n    renderChanges: boolean;\n}\n\nexport const defaultOptions: Options = {\n    ignoreHeight: false,\n    ignoreWidth: false,\n    ignoreFonts: false,\n    breakPages: true,\n    debug: false,\n    experimental: false,\n    className: \"docx\",\n    inWrapper: true,\n    trimXmlDeclaration: true,\n    ignoreLastRenderedPageBreak: true,\n    renderHeaders: true,\n    renderFooters: true,\n    renderFootnotes: true,\n    renderEndnotes: true,\n    useBase64URL: false,\n    useMathMLPolyfill: false,\n    renderChanges: false\n}\n\nexport function parseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any> {\n    const ops = {...defaultOptions, ...userOptions};\n    return WordDocument.load(data, new DocumentParser(ops), ops);\n}\n\nexport async function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\n    // const ops = {...defaultOptions, ...userOptions};\n    // const doc = await WordDocument.load(data, new DocumentParser(ops), ops)\n    const doc = await parseAsync(data, userOptions)\n\n    const renderer = new HtmlRenderer(window.document);\n    renderer.render(doc, bodyContainer, styleContainer, {...defaultOptions, ...userOptions});\n\n    return doc;\n}","import {Part} from \"../common/part\";\nimport {FontDeclaration, parseFonts} from \"./fonts\";\n\nexport class FontTablePart extends Part {\n    fonts: FontDeclaration[];\n\n    parseXml(root: Element) {\n        this.fonts = parseFonts(root, this._package.xmlParser);\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nconst embedFontTypeMap = {\n    embedRegular: 'regular',\n    embedBold: 'bold',\n    embedItalic: 'italic',\n    embedBoldItalic: 'boldItalic',\n}\n\nexport interface FontDeclaration {\n    name: string,\n    altName: string,\n    family: string,\n    embedFontRefs: EmbedFontRef[];\n}\n\nexport interface EmbedFontRef {\n    id: string;\n    key: string;\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\n}\n\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\n    return xml.elements(root).map(el => parseFont(el, xml));\n}\n\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\n    let result = <FontDeclaration>{\n        name: xml.attr(elem, \"name\"),\n        embedFontRefs: []\n    };\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"family\":\n                result.family = xml.attr(el, \"val\");\n                break;\n\n            case \"altName\":\n                result.altName = xml.attr(el, \"val\");\n                break;\n\n            case \"embedRegular\":\n            case \"embedBold\":\n            case \"embedItalic\":\n            case \"embedBoldItalic\":\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\n    return {\n        id: xml.attr(elem, \"id\"),\n        key: xml.attr(elem, \"fontKey\"),\n        type: embedFontTypeMap[elem.localName]\n    };\n}","import {DomType, OpenXmlElement} from \"../document/dom\";\n\nexport class WmlHeader implements OpenXmlElement {\n    type: DomType = DomType.Header;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}\n\nexport class WmlFooter implements OpenXmlElement {\n    type: DomType = DomType.Footer;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DocumentParser} from \"../document-parser\";\nimport {OpenXmlElement} from \"../document/dom\";\nimport {WmlHeader, WmlFooter} from \"./elements\";\n\nexport abstract class BaseHeaderFooterPart<T extends OpenXmlElement = OpenXmlElement> extends Part {\n    rootElement: T;\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.rootElement = this.createRootElement();\n        this.rootElement.children = this._documentParser.parseBodyElements(root);\n    }\n\n    protected abstract createRootElement(): T;\n}\n\nexport class HeaderPart extends BaseHeaderFooterPart<WmlHeader> {\n    protected createRootElement(): WmlHeader {\n        return new WmlHeader();\n    }\n}\n\nexport class FooterPart extends BaseHeaderFooterPart<WmlFooter> {\n    protected createRootElement(): WmlFooter {\n        return new WmlFooter();\n    }\n}","import {WordDocument} from './word-document';\nimport {\n    DomType,\n    WmlTable,\n    IDomNumbering,\n    WmlHyperlink,\n    IDomImage,\n    OpenXmlElement,\n    WmlTableColumn,\n    WmlTableCell,\n    WmlText,\n    WmlSymbol,\n    WmlBreak,\n    WmlNoteReference\n} from './document/dom';\nimport {CommonProperties} from './document/common';\nimport {Options} from './docx-preview';\nimport {DocumentElement} from './document/document';\nimport {WmlParagraph} from './document/paragraph';\nimport {asArray, escapeClassName, isString, keyBy, mergeDeep} from './utils';\nimport {computePixelToPoint, updateTabStop} from './javascript';\nimport {FontTablePart} from './font-table/font-table';\nimport {FooterHeaderReference, SectionProperties} from './document/section';\nimport {WmlRun, RunProperties} from './document/run';\nimport {WmlBookmarkStart} from './document/bookmarks';\nimport {IDomStyle} from './document/style';\nimport {WmlBaseNote, WmlFootnote} from './notes/elements';\nimport {ThemePart} from './theme/theme-part';\nimport {BaseHeaderFooterPart} from './header-footer/parts';\nimport {Part} from './common/part';\nimport mathMLCSS from \"./mathml.scss\";\nimport {VmlElement} from './vml/vml';\n\nconst ns = {\n    svg: \"http://www.w3.org/2000/svg\",\n    mathML: \"http://www.w3.org/1998/Math/MathML\"\n}\n\ninterface CellPos {\n    col: number;\n    row: number;\n}\n\ntype CellVerticalMergeType = Record<number, HTMLTableCellElement>;\n\nexport class HtmlRenderer {\n\n    className: string = \"docx\";\n    rootSelector: string;\n    document: WordDocument;\n    options: Options;\n    styleMap: Record<string, IDomStyle> = {};\n    currentPart: Part = null;\n\n    tableVerticalMerges: CellVerticalMergeType[] = [];\n    currentVerticalMerge: CellVerticalMergeType = null;\n    tableCellPositions: CellPos[] = [];\n    currentCellPosition: CellPos = null;\n\n    footnoteMap: Record<string, WmlFootnote> = {};\n    endnoteMap: Record<string, WmlFootnote> = {};\n    currentFootnoteIds: string[];\n    currentEndnoteIds: string[] = [];\n    usedHeaderFooterParts: any[] = [];\n\n    defaultTabSize: string;\n    currentTabs: any[] = [];\n    tabsTimeout: any = 0;\n\n    constructor(public htmlDocument: Document) {\n    }\n\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\n        this.document = document;\n        this.options = options;\n        this.className = options.className;\n        this.rootSelector = options.inWrapper ? `.${this.className}-wrapper` : ':root';\n        this.styleMap = null;\n\n        styleContainer = styleContainer || bodyContainer;\n\n        removeAllElements(styleContainer);\n        removeAllElements(bodyContainer);\n\n        appendComment(styleContainer, \"docxjs library predefined styles\");\n        styleContainer.appendChild(this.renderDefaultStyle());\n\n        if (!window.MathMLElement && options.useMathMLPolyfill) {\n            appendComment(styleContainer, \"docxjs mathml polyfill styles\");\n            styleContainer.appendChild(createStyleElement(mathMLCSS));\n        }\n\n        if (document.themePart) {\n            appendComment(styleContainer, \"docxjs document theme values\");\n            this.renderTheme(document.themePart, styleContainer);\n        }\n\n        if (document.stylesPart != null) {\n            this.styleMap = this.processStyles(document.stylesPart.styles);\n\n            appendComment(styleContainer, \"docxjs document styles\");\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\n        }\n\n        if (document.numberingPart) {\n            this.processNumberings(document.numberingPart.domNumberings);\n\n            appendComment(styleContainer, \"docxjs document numbering styles\");\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\n        }\n\n        if (document.footnotesPart) {\n            this.footnoteMap = keyBy(document.footnotesPart.notes, x => x.id);\n        }\n\n        if (document.endnotesPart) {\n            this.endnoteMap = keyBy(document.endnotesPart.notes, x => x.id);\n        }\n\n        if (document.settingsPart) {\n            this.defaultTabSize = document.settingsPart.settings?.defaultTabStop;\n        }\n\n        if (!options.ignoreFonts && document.fontTablePart)\n            this.renderFontTable(document.fontTablePart, styleContainer);\n\n        const sectionElements = this.renderSections(document.documentPart.body);\n\n        if (this.options.inWrapper) {\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\n        } else {\n            appendChildren(bodyContainer, sectionElements);\n        }\n\n        this.refreshTabStops();\n    }\n\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\n        const variables = {};\n        const fontScheme = themePart.theme?.fontScheme;\n\n        if (fontScheme) {\n            if (fontScheme.majorFont) {\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\n            }\n\n            if (fontScheme.minorFont) {\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\n            }\n        }\n\n        const colorScheme = themePart.theme?.colorScheme;\n\n        if (colorScheme) {\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\n                variables[`--docx-${k}-color`] = `#${v}`;\n            }\n        }\n\n        const cssText = this.styleToString(`.${this.className}`, variables);\n        styleContainer.appendChild(createStyleElement(cssText));\n    }\n\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\n        for (let f of fontsPart.fonts) {\n            for (let ref of f.embedFontRefs) {\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\n                    const cssValues = {\n                        'font-family': f.name,\n                        'src': `url(${fontData})`\n                    };\n\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\n                        cssValues['font-weight'] = 'bold';\n                    }\n\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\n                        cssValues['font-style'] = 'italic';\n                    }\n\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\n                    styleContainer.appendChild(createStyleElement(cssText));\n                    this.refreshTabStops();\n                });\n            }\n        }\n    }\n\n    processStyleName(className: string): string {\n        return className ? `${this.className}_${escapeClassName(className)}` : this.className;\n    }\n\n    processStyles(styles: IDomStyle[]) {\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\n\n        for (const style of styles.filter(x => x.basedOn)) {\n            const baseStyle = stylesMap[style.basedOn];\n\n            if (baseStyle) {\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\n\n                for (const baseValues of baseStyle.styles) {\n                    const styleValues = style.styles.find(x => x.target == baseValues.target);\n\n                    if (styleValues) {\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\n                    } else {\n                        style.styles.push({...baseValues, values: {...baseValues.values}});\n                    }\n                }\n            } else if (this.options.debug)\n                console.warn(`Can't find base style ${style.basedOn}`);\n        }\n\n        for (let style of styles) {\n            style.cssName = this.processStyleName(style.id);\n        }\n\n        return stylesMap;\n    }\n\n    processNumberings(numberings: IDomNumbering[]) {\n        for (let num of numberings.filter(n => n.pStyleName)) {\n            const style = this.findStyle(num.pStyleName);\n\n            if (style?.paragraphProps?.numbering) {\n                style.paragraphProps.numbering.level = num.level;\n            }\n        }\n    }\n\n    processElement(element: OpenXmlElement) {\n        if (element.children) {\n            for (const e of element.children) {\n                e.parent = element;\n\n                if (e.type == DomType.Table) {\n                    this.processTable(e);\n                } else {\n                    this.processElement(e);\n                }\n            }\n        }\n    }\n\n    processTable(table: WmlTable) {\n        for (const r of table.children) {\n            for (const c of r.children) {\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\n                ]);\n\n                this.processElement(c);\n            }\n        }\n    }\n\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\n        if (!input)\n            return output;\n\n        if (output == null) output = {};\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\n\n        for (const key of attrs) {\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\n                output[key] = input[key];\n        }\n\n        return output;\n    }\n\n    createSection(className: string, props: SectionProperties) {\n        const elem = this.createElement(\"section\", {className});\n\n        if (props) {\n            if (props.pageMargins) {\n                elem.style.paddingLeft = props.pageMargins.left;\n                elem.style.paddingRight = props.pageMargins.right;\n                elem.style.paddingTop = props.pageMargins.top;\n                elem.style.paddingBottom = props.pageMargins.bottom;\n            }\n\n            if (props.pageSize) {\n                if (!this.options.ignoreWidth)\n                    elem.style.width = props.pageSize.width;\n                if (!this.options.ignoreHeight)\n                    elem.style.minHeight = props.pageSize.height;\n            }\n\n            if (props.columns && props.columns.numberOfColumns) {\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\n                elem.style.columnGap = props.columns.space;\n\n                if (props.columns.separator) {\n                    elem.style.columnRule = \"1px solid black\";\n                }\n            }\n        }\n\n        return elem;\n    }\n\n    renderSections(document: DocumentElement): HTMLElement[] {\n        const result = [];\n\n        this.processElement(document);\n        const sections = this.splitBySection(document.children);\n        let prevProps = null;\n\n        for (let i = 0, l = sections.length; i < l; i++) {\n            this.currentFootnoteIds = [];\n\n            const section = sections[i];\n            const props = section.sectProps || document.props;\n            const sectionElement = this.createSection(this.className, props);\n            this.renderStyleValues(document.cssStyle, sectionElement);\n\n            this.options.renderHeaders && this.renderHeaderFooter(props.headerRefs, props,\n                result.length, prevProps != props, sectionElement);\n\n            const contentElement = this.createElement(\"article\");\n            this.renderElements(section.elements, contentElement);\n            sectionElement.appendChild(contentElement);\n\n            if (this.options.renderFootnotes) {\n                this.renderNotes(this.currentFootnoteIds, this.footnoteMap, sectionElement);\n            }\n\n            if (this.options.renderEndnotes && i == l - 1) {\n                this.renderNotes(this.currentEndnoteIds, this.endnoteMap, sectionElement);\n            }\n\n            this.options.renderFooters && this.renderHeaderFooter(props.footerRefs, props,\n                result.length, prevProps != props, sectionElement);\n\n            result.push(sectionElement);\n            prevProps = props;\n        }\n\n        return result;\n    }\n\n    renderHeaderFooter(refs: FooterHeaderReference[], props: SectionProperties, page: number, firstOfSection: boolean, into: HTMLElement) {\n        if (!refs) return;\n\n        const ref = (props.titlePage && firstOfSection ? refs.find(x => x.type == \"first\") : null)\n            ?? (page % 2 == 1 ? refs.find(x => x.type == \"even\") : null)\n            ?? refs.find(x => x.type == \"default\");\n\n        const part = ref && this.document.findPartByRelId(ref.id, this.document.documentPart) as BaseHeaderFooterPart;\n\n        if (part) {\n            this.currentPart = part;\n            if (!this.usedHeaderFooterParts.includes(part.path)) {\n                this.processElement(part.rootElement);\n                this.usedHeaderFooterParts.push(part.path);\n            }\n            this.renderElements([part.rootElement], into);\n            this.currentPart = null;\n        }\n    }\n\n    isPageBreakElement(elem: OpenXmlElement): boolean {\n        if (elem.type != DomType.Break)\n            return false;\n\n        if ((elem as WmlBreak).break == \"lastRenderedPageBreak\")\n            return !this.options.ignoreLastRenderedPageBreak;\n\n        return (elem as WmlBreak).break == \"page\";\n    }\n\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\n        let current = {sectProps: null, elements: []};\n        const result = [current];\n        let sectProps = undefined\n\n        for (let elem of elements) {\n            if (elem.type == DomType.Paragraph) {\n                const s = this.findStyle((elem as WmlParagraph).styleName);\n\n                if (s?.paragraphProps?.pageBreakBefore) {\n                    current.sectProps = sectProps;\n                    current = {sectProps: null, elements: []};\n                    result.push(current);\n                }\n            }\n\n            current.elements.push(elem);\n\n            if (elem.type == DomType.Paragraph) {\n                const p = elem as WmlParagraph;\n\n                sectProps = p.sectionProps;\n                let pBreakIndex = -1;\n                let rBreakIndex = -1;\n\n                if (this.options.breakPages && p.children) {\n                    pBreakIndex = p.children.findIndex(r => {\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\n                        return rBreakIndex != -1;\n                    });\n                }\n\n                if (sectProps || pBreakIndex != -1) {\n                    current.sectProps = sectProps;\n                    current = {sectProps: null, elements: []};\n                    result.push(current);\n                }\n\n                if (pBreakIndex != -1) {\n                    let breakRun = p.children[pBreakIndex];\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\n\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\n                        const children = elem.children;\n                        const newParagraph = {...elem, children: children.slice(pBreakIndex)};\n                        elem.children = children.slice(0, pBreakIndex);\n                        current.elements.push(newParagraph);\n\n                        if (splitRun) {\n                            let runChildren = breakRun.children;\n                            let newRun = {...breakRun, children: runChildren.slice(0, rBreakIndex)};\n                            elem.children.push(newRun);\n                            breakRun.children = runChildren.slice(rBreakIndex);\n                        }\n                    }\n                }\n            }\n        }\n\n        let currentSectProps = null;\n\n        for (let i = result.length - 1; i >= 0; i--) {\n            if (result[i].sectProps == null) {\n                result[i].sectProps = currentSectProps;\n            } else {\n                currentSectProps = result[i].sectProps\n            }\n        }\n\n        return result;\n    }\n\n    renderWrapper(children: HTMLElement[]) {\n        return this.createElement(\"div\", {className: `${this.className}-wrapper`}, children);\n    }\n\n    renderDefaultStyle() {\n        const c = this.className;\n        const styleText = `\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\n.${c} { color: black; }\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; overflow: hidden; }\nsection.${c}>article { margin-bottom: auto; }\n.${c} table { border-collapse: collapse; }\n.${c} table td, .${c} table th { vertical-align: top; }\n.${c} p { margin: 0pt; min-height: 1em; }\n.${c} span { white-space: pre-wrap; overflow-wrap: break-word; }\n.${c} a { color: inherit; text-decoration: inherit; }\n`;\n\n        return createStyleElement(styleText);\n    }\n\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\n    //     let css = \"\";\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\n    //     const topCounters = [];\n\n    //     for(let num of numberingPart.numberings) {\n    //         const absNum = numberingMap[num.abstractId];\n\n    //         for (let lvl of absNum.levels) {\n    //             const className = this.numberingClass(num.id, lvl.level);\n    //             let listStyleType = \"none\";\n\n    //             if(lvl.text && lvl.format == 'decimal') {\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\n\n    //                 if (lvl.level > 0) {\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\n    //                         \"counter-reset\": counter\n    //                     });\n    //                 } else {\n    //                     topCounters.push(counter);\n    //                 }\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\n    //                     \"counter-increment\": counter\n    //                 });\n    //             } else if(lvl.bulletPictureId) {\n    //                 let pict = bulletMap[lvl.bulletPictureId];\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": \"' '\",\n    //                     \"display\": \"inline-block\",\n    //                     \"background\": `var(${variable})`\n    //                 }, pict.style);\n\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\n    //                     container.appendChild(createStyleElement(text));\n    //                 });\n    //             } else {\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\n    //             }\n\n    //             css += this.styleToString(`p.${className}`, {\n    //                 \"display\": \"list-item\",\n    //                 \"list-style-position\": \"inside\",\n    //                 \"list-style-type\": listStyleType,\n    //                 //TODO\n    //                 //...num.style\n    //             });\n    //         }\n    //     }\n\n    //     if (topCounters.length > 0) {\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\n    //             \"counter-reset\": topCounters.join(\" \")\n    //         });\n    //     }\n\n    //     return createStyleElement(css);\n    // }\n\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\n        let styleText = \"\";\n        const resetCounters = [];\n\n        for (const num of numberings) {\n            const selector = `p.${this.numberingClass(num.id, num.level)}`;\n            let listStyleType = \"none\";\n\n            if (num.bullet) {\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": \"' '\",\n                    \"display\": \"inline-block\",\n                    \"background\": `var(${valiable})`\n                }, num.bullet.style);\n\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\n                    const text = `${this.rootSelector} { ${valiable}: url(${data}) }`;\n                    styleContainer.appendChild(createStyleElement(text));\n                });\n            } else if (num.levelText) {\n                let counter = this.numberingCounter(num.id, num.level);\n                const counterReset = `${counter} ${num.start - 1}`\n\n                if (num.level > 0) {\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\n                        \"counter-reset\": counterReset\n                    });\n                }\n                // reset all level counters with start value\n                resetCounters.push(counterReset);\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\n                    \"counter-increment\": counter,\n                    ...num.rStyle,\n                });\n            } else {\n                listStyleType = this.numFormatToCssValue(num.format);\n            }\n\n            styleText += this.styleToString(selector, {\n                \"display\": \"list-item\",\n                \"list-style-position\": \"inside\",\n                \"list-style-type\": listStyleType,\n                ...num.pStyle\n            });\n        }\n\n        if (resetCounters.length > 0) {\n            styleText += this.styleToString(this.rootSelector, {\n                \"counter-reset\": resetCounters.join(\" \")\n            });\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderStyles(styles: IDomStyle[]): HTMLElement {\n        let styleText = \"\";\n        const stylesMap = this.styleMap;\n        const defaultStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\n\n        for (const style of styles) {\n            let subStyles = style.styles;\n\n            if (style.linked) {\n                const linkedStyle = style.linked && stylesMap[style.linked];\n\n                if (linkedStyle)\n                    subStyles = subStyles.concat(linkedStyle.styles);\n                else if (this.options.debug)\n                    console.warn(`Can't find linked style ${style.linked}`);\n            }\n\n            for (const subStyle of subStyles) {\n                //TODO temporary disable modificators until test it well\n                let selector = `${style.target ?? ''}.${style.cssName}`; //${subStyle.mod ?? ''}\n\n                if (style.target != subStyle.target)\n                    selector += ` ${subStyle.target}`;\n\n                if (defaultStyles[style.target] == style)\n                    selector = `.${this.className} ${style.target}, ` + selector;\n\n                styleText += this.styleToString(selector, subStyle.values);\n            }\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderNotes(noteIds: string[], notesMap: Record<string, WmlBaseNote>, into: HTMLElement) {\n        const notes = noteIds.map(id => notesMap[id]).filter(x => x);\n\n        if (notes.length > 0) {\n            const result = this.createElement(\"ol\", null, this.renderElements(notes));\n            into.appendChild(result);\n        }\n    }\n\n    renderElement(elem: OpenXmlElement): Node | Node[] {\n        switch (elem.type) {\n            case DomType.Paragraph:\n                return this.renderParagraph(elem as WmlParagraph);\n\n            case DomType.BookmarkStart:\n                return this.renderBookmarkStart(elem as WmlBookmarkStart);\n\n            case DomType.BookmarkEnd:\n                return null; //ignore bookmark end\n\n            case DomType.Run:\n                return this.renderRun(elem as WmlRun);\n\n            case DomType.Table:\n                return this.renderTable(elem);\n\n            case DomType.Row:\n                return this.renderTableRow(elem);\n\n            case DomType.Cell:\n                return this.renderTableCell(elem);\n\n            case DomType.Hyperlink:\n                return this.renderHyperlink(elem);\n\n            case DomType.Drawing:\n                return this.renderDrawing(elem);\n\n            case DomType.Image:\n                return this.renderImage(elem as IDomImage);\n\n            case DomType.Text:\n                return this.renderText(elem as WmlText);\n\n            case DomType.DeletedText:\n                return this.renderDeletedText(elem as WmlText);\n\n            case DomType.Tab:\n                return this.renderTab(elem);\n\n            case DomType.Symbol:\n                return this.renderSymbol(elem as WmlSymbol);\n\n            case DomType.Break:\n                return this.renderBreak(elem as WmlBreak);\n\n            case DomType.Footer:\n                return this.renderContainer(elem, \"footer\");\n\n            case DomType.Header:\n                return this.renderContainer(elem, \"header\");\n\n            case DomType.Footnote:\n            case DomType.Endnote:\n                return this.renderContainer(elem, \"li\");\n\n            case DomType.FootnoteReference:\n                return this.renderFootnoteReference(elem as WmlNoteReference);\n\n            case DomType.EndnoteReference:\n                return this.renderEndnoteReference(elem as WmlNoteReference);\n\n            case DomType.NoBreakHyphen:\n                return this.createElement(\"wbr\");\n\n            case DomType.VmlPicture:\n                return this.renderVmlPicture(elem);\n\n            case DomType.VmlElement:\n                return this.renderVmlElement(elem as VmlElement);\n\n            case DomType.MmlMath:\n                return this.renderContainerNS(elem, ns.mathML, \"math\", {xmlns: ns.mathML});\n\n            case DomType.MmlMathParagraph:\n                return this.renderContainer(elem, \"span\");\n\n            case DomType.MmlFraction:\n                return this.renderContainerNS(elem, ns.mathML, \"mfrac\");\n\n            case DomType.MmlNumerator:\n            case DomType.MmlDenominator:\n                return this.renderContainerNS(elem, ns.mathML, \"mrow\");\n\n            case DomType.MmlRadical:\n                return this.renderMmlRadical(elem);\n\n            case DomType.MmlDegree:\n                return this.renderContainerNS(elem, ns.mathML, \"mn\");\n\n            case DomType.MmlSuperscript:\n                return this.renderContainerNS(elem, ns.mathML, \"msup\");\n\n            case DomType.MmlSubscript:\n                return this.renderContainerNS(elem, ns.mathML, \"msub\");\n\n            case DomType.MmlBase:\n                return this.renderContainerNS(elem, ns.mathML, \"mrow\");\n\n            case DomType.MmlSuperArgument:\n                return this.renderContainerNS(elem, ns.mathML, \"mn\");\n\n            case DomType.MmlSubArgument:\n                return this.renderContainerNS(elem, ns.mathML, \"mn\");\n\n            case DomType.MmlDelimiter:\n                return this.renderMmlDelimiter(elem);\n\n            case DomType.MmlRun:\n                return this.renderMmlRun(elem);\n\n            case DomType.MmlNary:\n                return this.renderMmlNary(elem);\n\n            case DomType.Inserted:\n                return this.renderInserted(elem);\n\n            case DomType.Deleted:\n                return this.renderDeleted(elem);\n        }\n\n        return null;\n    }\n\n    renderChildren(elem: OpenXmlElement, into?: Element): Node[] {\n        return this.renderElements(elem.children, into);\n    }\n\n    renderElements(elems: OpenXmlElement[], into?: Element): Node[] {\n        if (elems == null)\n            return null;\n\n        const result = elems.flatMap(e => this.renderElement(e)).filter(e => e != null);\n\n        if (into)\n            appendChildren(into, result);\n\n        return result;\n    }\n\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap, props?: Record<string, any>) {\n        return this.createElement(tagName, props, this.renderChildren(elem));\n    }\n\n    renderContainerNS(elem: OpenXmlElement, ns: string, tagName: string, props?: Record<string, any>) {\n        return createElementNS(ns, tagName, props, this.renderChildren(elem));\n    }\n\n    renderParagraph(elem: WmlParagraph) {\n        const result = this.createElement(\"p\");\n\n        const style = this.findStyle(elem.styleName);\n        elem.tabs ??= style?.paragraphProps?.tabs;  //TODO\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n        this.renderCommonProperties(result.style, elem);\n\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\n\n        if (numbering) {\n            result.classList.add(this.numberingClass(numbering.id, numbering.level));\n        }\n\n        return result;\n    }\n\n    renderRunProperties(style: any, props: RunProperties) {\n        this.renderCommonProperties(style, props);\n    }\n\n    renderCommonProperties(style: any, props: CommonProperties) {\n        if (props == null)\n            return;\n\n        if (props.color) {\n            style[\"color\"] = props.color;\n        }\n\n        if (props.fontSize) {\n            style[\"font-size\"] = props.fontSize;\n        }\n    }\n\n    renderHyperlink(elem: WmlHyperlink) {\n        const result = this.createElement(\"a\");\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.href) {\n            result.href = elem.href;\n        } else if (elem.id) {\n            const rel = this.document.documentPart.rels\n                .find(it => it.id == elem.id && it.targetMode === \"External\");\n            result.href = rel?.target;\n        }\n\n        return result;\n    }\n\n    renderDrawing(elem: OpenXmlElement) {\n        const result = this.createElement(\"div\");\n\n        result.style.display = \"inline-block\";\n        result.style.position = \"relative\";\n        result.style.textIndent = \"0px\";\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderImage(elem: IDomImage) {\n        let result = this.createElement(\"img\");\n\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (this.document) {\n            this.document.loadDocumentImage(elem.src, this.currentPart).then(x => {\n                result.src = x;\n            });\n        }\n\n        return result;\n    }\n\n    renderText(elem: WmlText) {\n        return this.htmlDocument.createTextNode(elem.text);\n    }\n\n    renderDeletedText(elem: WmlText) {\n        return this.options.renderEndnotes ? this.htmlDocument.createTextNode(elem.text) : null;\n    }\n\n    renderBreak(elem: WmlBreak) {\n        if (elem.break == \"textWrapping\") {\n            return this.createElement(\"br\");\n        }\n\n        return null;\n    }\n\n    renderInserted(elem: OpenXmlElement): Node | Node[] {\n        if (this.options.renderChanges)\n            return this.renderContainer(elem, \"ins\");\n\n        return this.renderChildren(elem);\n    }\n\n    renderDeleted(elem: OpenXmlElement): Node {\n        if (this.options.renderChanges)\n            return this.renderContainer(elem, \"del\");\n\n        return null;\n    }\n\n    renderSymbol(elem: WmlSymbol) {\n        const span = this.createElement(\"span\");\n        span.style.fontFamily = elem.font;\n        span.innerHTML = `&#x${elem.char};`\n        return span;\n    }\n\n    renderFootnoteReference(elem: WmlNoteReference) {\n        const result = this.createElement(\"sup\");\n        this.currentFootnoteIds.push(elem.id);\n        result.textContent = `${this.currentFootnoteIds.length}`;\n        return result;\n    }\n\n    renderEndnoteReference(elem: WmlNoteReference) {\n        const result = this.createElement(\"sup\");\n        this.currentEndnoteIds.push(elem.id);\n        result.textContent = `${this.currentEndnoteIds.length}`;\n        return result;\n    }\n\n    renderTab(elem: OpenXmlElement) {\n        const tabSpan = this.createElement(\"span\");\n\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\n\n        if (this.options.experimental) {\n            tabSpan.className = this.tabStopClass();\n            const stops = findParent<WmlParagraph>(elem, DomType.Paragraph)?.tabs;\n            this.currentTabs.push({stops, span: tabSpan});\n        }\n\n        return tabSpan;\n    }\n\n    renderBookmarkStart(elem: WmlBookmarkStart): HTMLElement {\n        const result = this.createElement(\"span\");\n        result.id = elem.name;\n        return result;\n    }\n\n    renderRun(elem: WmlRun) {\n        if (elem.fieldRun)\n            return null;\n\n        const result = this.createElement(\"span\");\n\n        if (elem.id)\n            result.id = elem.id;\n\n        this.renderClass(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.verticalAlign) {\n            const wrapper = this.createElement(elem.verticalAlign as any);\n            this.renderChildren(elem, wrapper);\n            result.appendChild(wrapper);\n        } else {\n            this.renderChildren(elem, result);\n        }\n\n        return result;\n    }\n\n    renderTable(elem: WmlTable) {\n        let result = this.createElement(\"table\");\n\n        this.tableCellPositions.push(this.currentCellPosition);\n        this.tableVerticalMerges.push(this.currentVerticalMerge);\n        this.currentVerticalMerge = {};\n        this.currentCellPosition = {col: 0, row: 0};\n\n        if (elem.columns)\n            result.appendChild(this.renderTableColumns(elem.columns));\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        this.currentVerticalMerge = this.tableVerticalMerges.pop();\n        this.currentCellPosition = this.tableCellPositions.pop();\n\n        return result;\n    }\n\n    renderTableColumns(columns: WmlTableColumn[]) {\n        let result = this.createElement(\"colgroup\");\n\n        for (let col of columns) {\n            let colElem = this.createElement(\"col\");\n\n            if (col.width)\n                colElem.style.width = col.width;\n\n            result.appendChild(colElem);\n        }\n\n        return result;\n    }\n\n    renderTableRow(elem: OpenXmlElement) {\n        let result = this.createElement(\"tr\");\n\n        this.currentCellPosition.col = 0;\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        this.currentCellPosition.row++;\n\n        return result;\n    }\n\n    renderTableCell(elem: WmlTableCell) {\n        let result = this.createElement(\"td\");\n\n        const key = this.currentCellPosition.col;\n\n        if (elem.verticalMerge) {\n            if (elem.verticalMerge == \"restart\") {\n                this.currentVerticalMerge[key] = result;\n                result.rowSpan = 1;\n            } else if (this.currentVerticalMerge[key]) {\n                this.currentVerticalMerge[key].rowSpan += 1;\n                result.style.display = \"none\";\n            }\n        } else {\n            this.currentVerticalMerge[key] = null;\n        }\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.span)\n            result.colSpan = elem.span;\n\n        this.currentCellPosition.col += result.colSpan;\n\n        return result;\n    }\n\n    renderVmlPicture(elem: OpenXmlElement) {\n        const result = createElement(\"div\");\n        this.renderChildren(elem, result);\n        return result;\n    }\n\n    renderVmlElement(elem: VmlElement): SVGElement {\n        const container = createSvgElement(\"svg\");\n\n        container.setAttribute(\"style\", elem.cssStyleText);\n\n        const result = createSvgElement(elem.tagName as any);\n        Object.entries(elem.attrs).forEach(([k, v]) => result.setAttribute(k, v));\n\n        if (elem.imageHref?.id) {\n            this.document?.loadDocumentImage(elem.imageHref.id, this.currentPart)\n                .then(x => result.setAttribute(\"href\", x));\n        }\n\n        container.appendChild(result);\n\n        requestAnimationFrame(() => {\n            const bb = (container.firstElementChild as any).getBBox();\n\n            container.setAttribute(\"width\", `${Math.ceil(bb.x + bb.width)}`);\n            container.setAttribute(\"height\", `${Math.ceil(bb.y + bb.height)}`);\n        });\n\n        return container;\n    }\n\n    renderMmlRadical(elem: OpenXmlElement): HTMLElement {\n        const base = elem.children.find(el => el.type == DomType.MmlBase);\n\n        if (elem.props?.hideDegree) {\n            return createElementNS(ns.mathML, \"msqrt\", null, this.renderElements([base]));\n        }\n\n        const degree = elem.children.find(el => el.type == DomType.MmlDegree);\n        return createElementNS(ns.mathML, \"mroot\", null, this.renderElements([base, degree]));\n    }\n\n    renderMmlDelimiter(elem: OpenXmlElement): HTMLElement {\n        const children = [];\n\n        children.push(createElementNS(ns.mathML, \"mo\", null, [elem.props.beginChar ?? '(']));\n        children.push(...this.renderElements(elem.children));\n        children.push(createElementNS(ns.mathML, \"mo\", null, [elem.props.endChar ?? ')']));\n\n        return createElementNS(ns.mathML, \"mrow\", null, children);\n    }\n\n    renderMmlNary(elem: OpenXmlElement): HTMLElement {\n        const children = [];\n        const grouped = keyBy(elem.children, x => x.type);\n\n        const sup = grouped[DomType.MmlSuperArgument];\n        const sub = grouped[DomType.MmlSubArgument];\n        const supElem = sup ? createElementNS(ns.mathML, \"mo\", null, asArray(this.renderElement(sup))) : null;\n        const subElem = sub ? createElementNS(ns.mathML, \"mo\", null, asArray(this.renderElement(sub))) : null;\n\n        if (elem.props?.char) {\n            const charElem = createElementNS(ns.mathML, \"mo\", null, [elem.props.char]);\n\n            if (supElem || subElem) {\n                children.push(createElementNS(ns.mathML, \"munderover\", null, [charElem, subElem, supElem]));\n            } else if (supElem) {\n                children.push(createElementNS(ns.mathML, \"mover\", null, [charElem, supElem]));\n            } else if (subElem) {\n                children.push(createElementNS(ns.mathML, \"munder\", null, [charElem, subElem]));\n            } else {\n                children.push(charElem);\n            }\n        }\n\n        children.push(...this.renderElements(grouped[DomType.MmlBase].children));\n\n        return createElementNS(ns.mathML, \"mrow\", null, children);\n    }\n\n    renderMmlRun(elem: OpenXmlElement) {\n        const result = createElementNS(ns.mathML, \"ms\");\n\n        this.renderClass(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n        this.renderChildren(elem, result);\n\n        return result;\n    }\n\n    renderStyleValues(style: Record<string, string>, output: HTMLElement) {\n        Object.assign(output.style, style);\n    }\n\n    renderClass(input: OpenXmlElement, output: HTMLElement) {\n        if (input.className)\n            output.className = input.className;\n\n        if (input.styleName)\n            output.classList.add(this.processStyleName(input.styleName));\n    }\n\n    findStyle(styleName: string) {\n        return styleName && this.styleMap?.[styleName];\n    }\n\n    numberingClass(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    tabStopClass() {\n        return `${this.className}-tab-stop`;\n    }\n\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\n        let result = `${selectors} {\\r\\n`;\n\n        for (const key in values) {\n            result += `  ${key}: ${values[key]};\\r\\n`;\n        }\n\n        if (cssText)\n            result += cssText;\n\n        return result + \"}\\r\\n\";\n    }\n\n    numberingCounter(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\n        const suffMap = {\n            \"tab\": \"\\\\9\",\n            \"space\": \"\\\\a0\",\n        };\n\n        const result = text.replace(/%\\d*/g, s => {\n            let lvl = parseInt(s.substring(1), 10) - 1;\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\n        });\n\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\n    }\n\n    numFormatToCssValue(format: string) {\n        const mapping = {\n            none: \"none\",\n            bullet: \"disc\",\n            decimal: \"decimal\",\n            lowerLetter: \"lower-alpha\",\n            upperLetter: \"upper-alpha\",\n            lowerRoman: \"lower-roman\",\n            upperRoman: \"upper-roman\",\n            decimalZero: \"decimal-leading-zero\", // 01,02,03,...\n            // ordinal: \"\", // 1st, 2nd, 3rd,...\n            // ordinalText: \"\", //First, Second, Third, ...\n            // cardinalText: \"\", //One,Two Three,...\n            // numberInDash: \"\", //-1-,-2-,-3-, ...\n            // hex: \"upper-hexadecimal\",\n            aiueo: \"katakana\",\n            aiueoFullWidth: \"katakana\",\n            chineseCounting: \"simp-chinese-informal\",\n            chineseCountingThousand: \"simp-chinese-informal\",\n            chineseLegalSimplified: \"simp-chinese-formal\", // 中文大写\n            chosung: \"hangul-consonant\",\n            ideographDigital: \"cjk-ideographic\",\n            ideographTraditional: \"cjk-heavenly-stem\", // 十天干\n            ideographLegalTraditional: \"trad-chinese-formal\",\n            ideographZodiac: \"cjk-earthly-branch\", // 十二地支\n            iroha: \"katakana-iroha\",\n            irohaFullWidth: \"katakana-iroha\",\n            japaneseCounting: \"japanese-informal\",\n            japaneseDigitalTenThousand: \"cjk-decimal\",\n            japaneseLegal: \"japanese-formal\",\n            thaiNumbers: \"thai\",\n            koreanCounting: \"korean-hangul-formal\",\n            koreanDigital: \"korean-hangul-formal\",\n            koreanDigital2: \"korean-hanja-informal\",\n            hebrew1: \"hebrew\",\n            hebrew2: \"hebrew\",\n            hindiNumbers: \"devanagari\",\n            ganada: \"hangul\",\n            taiwaneseCounting: \"cjk-ideographic\",\n            taiwaneseCountingThousand: \"cjk-ideographic\",\n            taiwaneseDigital:  \"cjk-decimal\",\n        };\n\n        return mapping[format] || format;\n    }\n\n    refreshTabStops() {\n        if (!this.options.experimental)\n            return;\n\n        clearTimeout(this.tabsTimeout);\n\n        this.tabsTimeout = setTimeout(() => {\n            const pixelToPoint = computePixelToPoint();\n\n            for (let tab of this.currentTabs) {\n                updateTabStop(tab.span, tab.stops, this.defaultTabSize, pixelToPoint);\n            }\n        }, 500);\n    }\n\n    createElement = createElement;\n}\n\ntype ChildType = Node | string;\n\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\n    tagName: T,\n    props?: Partial<Record<keyof HTMLElementTagNameMap[T], any>>,\n    children?: ChildType[]\n): HTMLElementTagNameMap[T] {\n    return createElementNS(undefined, tagName, props, children);\n}\n\nfunction createSvgElement<T extends keyof SVGElementTagNameMap>(\n    tagName: T,\n    props?: Partial<Record<keyof SVGElementTagNameMap[T], any>>,\n    children?: ChildType[]\n): SVGElementTagNameMap[T] {\n    return createElementNS(ns.svg, tagName, props, children);\n}\n\nfunction createElementNS(ns: string, tagName: string, props?: Partial<Record<any, any>>, children?: ChildType[]): any {\n    const result = ns ? document.createElementNS(ns, tagName) : document.createElement(tagName);\n    Object.assign(result, props);\n    children && appendChildren(result, children);\n    return result;\n}\n\nfunction removeAllElements(elem: HTMLElement) {\n    elem.innerHTML = '';\n}\n\nfunction appendChildren(elem: Element, children: (Node | string)[]) {\n    children.forEach(c => elem.appendChild(isString(c) ? document.createTextNode(c) : c));\n}\n\nfunction createStyleElement(cssText: string) {\n    return createElement(\"style\", {innerHTML: cssText});\n}\n\nfunction appendComment(elem: HTMLElement, comment: string) {\n    elem.appendChild(document.createComment(comment));\n}\n\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\n    let parent = elem.parent;\n\n    while (parent != null && parent.type != type)\n        parent = parent.parent;\n\n    return <T>parent;\n}\n","import {Length} from \"./document/common\";\nimport {ParagraphTab} from \"./document/paragraph\";\n\ninterface TabStop {\n    pos: number;\n    leader: string;\n    style: string;\n}\n\nconst defaultTab: TabStop = {pos: 0, leader: \"none\", style: \"left\"};\nconst maxTabs = 50;\n\nexport function computePixelToPoint(container: HTMLElement = document.body) {\n    const temp = document.createElement(\"div\");\n    temp.style.width = '100pt';\n\n    container.appendChild(temp);\n    const result = 100 / temp.offsetWidth;\n    container.removeChild(temp);\n\n    return result\n}\n\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], defaultTabSize: Length, pixelToPoint: number = 72 / 96) {\n    const p = elem.closest(\"p\");\n\n    const ebb = elem.getBoundingClientRect();\n    const pbb = p.getBoundingClientRect();\n    const pcs = getComputedStyle(p);\n\n    const tabStops = tabs?.length > 0 ? tabs.map(t => ({\n        pos: lengthToPoint(t.position),\n        leader: t.leader,\n        style: t.style\n    })).sort((a, b) => a.pos - b.pos) : [defaultTab];\n\n    const lastTab = tabStops[tabStops.length - 1];\n    const pWidthPt = pbb.width * pixelToPoint;\n    const size = lengthToPoint(defaultTabSize);\n    let pos = lastTab.pos + size;\n\n    if (pos < pWidthPt) {\n        for (; pos < pWidthPt && tabStops.length < maxTabs; pos += size) {\n            tabStops.push({...defaultTab, pos: pos});\n        }\n    }\n\n    const marginLeft = parseFloat(pcs.marginLeft);\n    const pOffset = pbb.left + marginLeft;\n    const left = (ebb.left - pOffset) * pixelToPoint;\n    const tab = tabStops.find(t => t.style != \"clear\" && t.pos > left);\n\n    if (tab == null)\n        return;\n\n    let width: number = 1;\n\n    if (tab.style == \"right\" || tab.style == \"center\") {\n        const tabStops = Array.from(p.querySelectorAll(`.${elem.className}`));\n        const nextIdx = tabStops.indexOf(elem) + 1;\n        const range = document.createRange();\n        range.setStart(elem, 1);\n\n        if (nextIdx < tabStops.length) {\n            range.setEndBefore(tabStops[nextIdx]);\n        } else {\n            range.setEndAfter(p);\n        }\n\n        const mul = tab.style == \"center\" ? 0.5 : 1;\n        const nextBB = range.getBoundingClientRect();\n        const offset = nextBB.left + mul * nextBB.width - (pbb.left - marginLeft);\n\n        width = tab.pos - offset * pixelToPoint;\n    } else {\n        width = tab.pos - left;\n    }\n\n    elem.innerHTML = \"&nbsp;\";\n    elem.style.textDecoration = \"inherit\";\n    elem.style.wordSpacing = `${width.toFixed(0)}pt`;\n\n    switch (tab.leader) {\n        case \"dot\":\n        case \"middleDot\":\n            elem.style.textDecoration = \"underline\";\n            elem.style.textDecorationStyle = \"dotted\";\n            break;\n\n        case \"hyphen\":\n        case \"heavy\":\n        case \"underscore\":\n            elem.style.textDecoration = \"underline\";\n            break;\n    }\n}\n\nfunction lengthToPoint(length: Length): number {\n    return parseFloat(length);\n}","import {DomType, OpenXmlElement} from \"../document/dom\";\n\nexport abstract class WmlBaseNote implements OpenXmlElement {\n    id: string;\n    type: DomType;\n    noteType: string;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}\n\nexport class WmlFootnote extends WmlBaseNote {\n    type = DomType.Footnote\n}\n\nexport class WmlEndnote extends WmlBaseNote {\n    type = DomType.Endnote\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DocumentParser} from \"../document-parser\";\nimport {WmlBaseNote, WmlEndnote, WmlFootnote} from \"./elements\";\n\nexport class BaseNotePart<T extends WmlBaseNote> extends Part {\n    protected _documentParser: DocumentParser;\n\n    notes: T[]\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n}\n\nexport class FootnotesPart extends BaseNotePart<WmlFootnote> {\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path, parser);\n    }\n\n    parseXml(root: Element) {\n        this.notes = this._documentParser.parseNotes(root, \"footnote\", WmlFootnote);\n    }\n}\n\nexport class EndnotesPart extends BaseNotePart<WmlEndnote> {\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path, parser);\n    }\n\n    parseXml(root: Element) {\n        this.notes = this._documentParser.parseNotes(root, \"endnote\", WmlEndnote);\n    }\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DocumentParser} from \"../document-parser\";\nimport {IDomNumbering} from \"../document/dom\";\nimport {\n    AbstractNumbering,\n    Numbering,\n    NumberingBulletPicture,\n    NumberingPartProperties,\n    parseNumberingPart\n} from \"./numbering\";\n\nexport class NumberingPart extends Part implements NumberingPartProperties {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n\n    domNumberings: IDomNumbering[];\n\n    parseXml(root: Element) {\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\n        this.domNumberings = this._documentParser.parseNumberingFile(root);\n    }\n}","import {NumberingPicBullet} from \"../document/dom\";\nimport {ParagraphProperties, parseParagraphProperties} from \"../document/paragraph\";\nimport {parseRunProperties, RunProperties} from \"../document/run\";\nimport {XmlParser} from \"../parser/xml-parser\";\n\nexport interface NumberingPartProperties {\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n}\n\nexport interface Numbering {\n    id: string;\n    abstractId: string;\n    overrides: NumberingLevelOverride[];\n}\n\nexport interface NumberingLevelOverride {\n    level: number;\n    start: number;\n    numberingLevel: NumberingLevel;\n}\n\nexport interface AbstractNumbering {\n    id: string;\n    name: string;\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\n    levels: NumberingLevel[];\n    numberingStyleLink: string;\n    styleLink: string;\n}\n\nexport interface NumberingLevel {\n    level: number;\n    start: string;\n    restart: number;\n    format: 'lowerRoman' | 'lowerLetter' | string;\n    text: string;\n    justification: string;\n    bulletPictureId: string;\n    paragraphStyle: string;\n    paragraphProps: ParagraphProperties;\n    runProps: RunProperties;\n}\n\nexport interface NumberingBulletPicture {\n    id: string;\n    referenceId: string;\n    style: string;\n}\n\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\n    let result: NumberingPartProperties = {\n        numberings: [],\n        abstractNumberings: [],\n        bulletPictures: []\n    }\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"num\":\n                result.numberings.push(parseNumbering(e, xml));\n                break;\n            case \"abstractNum\":\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\n                break;\n            case \"numPicBullet\":\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\n    let result = <Numbering>{\n        id: xml.attr(elem, 'numId'),\n        overrides: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"abstractNumId\":\n                result.abstractId = xml.attr(e, \"val\");\n                break;\n            case \"lvlOverride\":\n                result.overrides.push(parseNumberingLevelOverride(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\n    let result = <AbstractNumbering>{\n        id: xml.attr(elem, 'abstractNumId'),\n        levels: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"name\":\n                result.name = xml.attr(e, \"val\");\n                break;\n            case \"multiLevelType\":\n                result.multiLevelType = xml.attr(e, \"val\");\n                break;\n            case \"numStyleLink\":\n                result.numberingStyleLink = xml.attr(e, \"val\");\n                break;\n            case \"styleLink\":\n                result.styleLink = xml.attr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.levels.push(parseNumberingLevel(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\n    let result = <NumberingLevel>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"start\":\n                result.start = xml.attr(e, \"val\");\n                break;\n            case \"lvlRestart\":\n                result.restart = xml.intAttr(e, \"val\");\n                break;\n            case \"numFmt\":\n                result.format = xml.attr(e, \"val\");\n                break;\n            case \"lvlText\":\n                result.text = xml.attr(e, \"val\");\n                break;\n            case \"lvlJc\":\n                result.justification = xml.attr(e, \"val\");\n                break;\n            case \"lvlPicBulletId\":\n                result.bulletPictureId = xml.attr(e, \"val\");\n                break;\n            case \"pStyle\":\n                result.paragraphStyle = xml.attr(e, \"val\");\n                break;\n            case \"pPr\":\n                result.paragraphProps = parseParagraphProperties(e, xml);\n                break;\n            case \"rPr\":\n                result.runProps = parseRunProperties(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevelOverride(elem: Element, xml: XmlParser): NumberingLevelOverride {\n    let result = <NumberingLevelOverride>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"startOverride\":\n                result.start = xml.intAttr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.numberingLevel = parseNumberingLevel(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\n    //TODO\n    const pict = xml.element(elem, \"pict\");\n    const shape = pict && xml.element(pict, \"shape\");\n    const imagedata = shape && xml.element(shape, \"imagedata\");\n\n    return imagedata ? {\n        id: xml.attr(elem, \"numPicBulletId\"),\n        referenceId: xml.attr(imagedata, \"id\"),\n        style: xml.attr(shape, \"style\")\n    } : null;\n}\n","import {Length, LengthUsage, LengthUsageType, convertLength, convertBoolean} from \"../document/common\";\n\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\n    if (trimXmlDeclaration)\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\n\n    xmlString = removeUTF8BOM(xmlString);\n\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");\n    const errorText = hasXmlParserError(result);\n\n    if (errorText)\n        throw new Error(errorText);\n\n    return result;\n}\n\nfunction hasXmlParserError(doc: Document) {\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\n}\n\nfunction removeUTF8BOM(data: string) {\n    return data.charCodeAt(0) === 0xFEFF ? data.substring(1) : data;\n}\n\nexport function serializeXmlString(elem: Node): string {\n    return new XMLSerializer().serializeToString(elem);\n}\n\nexport class XmlParser {\n    elements(elem: Element, localName: string = null): Element[] {\n        const result = [];\n\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\n                result.push(c);\n        }\n\n        return result;\n    }\n\n    element(elem: Element, localName: string): Element {\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (c as Element).localName == localName)\n                return c as Element;\n        }\n\n        return null;\n    }\n\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\n        var el = this.element(elem, localName);\n        return el ? this.attr(el, attrLocalName) : undefined;\n    }\n\n    attrs(elem: Element) {\n        return Array.from(elem.attributes);\n    }\n\n    attr(elem: Element, localName: string): string {\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\n            let a = elem.attributes.item(i);\n\n            if (a.localName == localName)\n                return a.value;\n        }\n\n        return null;\n    }\n\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseInt(val) : defaultValue;\n    }\n\n    hexAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseInt(val, 16) : defaultValue;\n    }\n\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseFloat(val) : defaultValue;\n    }\n\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\n        return convertBoolean(this.attr(node, attrName), defaultValue);\n    }\n\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\n        return convertLength(this.attr(node, attrName), usage);\n    }\n}\n\nconst globalXmlParser = new XmlParser();\n\nexport default globalXmlParser;","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {WmlSettings, parseSettings} from \"./settings\";\n\nexport class SettingsPart extends Part {\n    settings: WmlSettings;\n\n    constructor(pkg: OpenXmlPackage, path: string) {\n        super(pkg, path);\n    }\n\n    parseXml(root: Element) {\n        this.settings = parseSettings(root, this._package.xmlParser);\n    }\n}","import {DocumentParser} from \"../document-parser\";\nimport {Length} from \"../document/common\";\nimport {XmlParser} from \"../parser/xml-parser\";\n\nexport interface WmlSettings {\n    defaultTabStop: Length;\n    footnoteProps: NoteProperties;\n    endnoteProps: NoteProperties;\n    autoHyphenation: boolean;\n}\n\nexport interface NoteProperties {\n    nummeringFormat: string;\n    defaultNoteIds: string[];\n}\n\nexport function parseSettings(elem: Element, xml: XmlParser) {\n    var result = {} as WmlSettings;\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"defaultTabStop\":\n                result.defaultTabStop = xml.lengthAttr(el, \"val\");\n                break;\n            case \"footnotePr\":\n                result.footnoteProps = parseNoteProperties(el, xml);\n                break;\n            case \"endnotePr\":\n                result.endnoteProps = parseNoteProperties(el, xml);\n                break;\n            case \"autoHyphenation\":\n                result.autoHyphenation = xml.boolAttr(el, \"val\");\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNoteProperties(elem: Element, xml: XmlParser) {\n    var result = {\n        defaultNoteIds: []\n    } as NoteProperties;\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"numFmt\":\n                result.nummeringFormat = xml.attr(el, \"val\");\n                break;\n\n            case \"footnote\":\n            case \"endnote\":\n                result.defaultNoteIds.push(xml.attr(el, \"id\"));\n                break;\n        }\n    }\n\n    return result;\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DocumentParser} from \"../document-parser\";\nimport {IDomStyle} from \"../document/style\";\n\nexport class StylesPart extends Part {\n    styles: IDomStyle[];\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.styles = this._documentParser.parseStylesFile(root);\n    }\n}","import {OpenXmlPackage} from \"../common/open-xml-package\";\nimport {Part} from \"../common/part\";\nimport {DmlTheme, parseTheme} from \"./theme\";\n\nexport class ThemePart extends Part {\n    theme: DmlTheme;\n\n    constructor(pkg: OpenXmlPackage, path: string) {\n        super(pkg, path);\n    }\n\n    parseXml(root: Element) {\n        this.theme = parseTheme(root, this._package.xmlParser);\n    }\n}","import {XmlParser} from \"../parser/xml-parser\";\n\nexport class DmlTheme {\n    colorScheme: DmlColorScheme;\n    fontScheme: DmlFontScheme;\n}\n\nexport interface DmlColorScheme {\n    name: string;\n    colors: Record<string, string>;\n}\n\nexport interface DmlFontScheme {\n    name: string;\n    majorFont: DmlFormInfo,\n    minorFont: DmlFormInfo\n}\n\nexport interface DmlFormInfo {\n    latinTypeface: string;\n    eaTypeface: string;\n    csTypeface: string;\n}\n\nexport function parseTheme(elem: Element, xml: XmlParser) {\n    var result = new DmlTheme();\n    var themeElements = xml.element(elem, \"themeElements\");\n\n    for (let el of xml.elements(themeElements)) {\n        switch (el.localName) {\n            case \"clrScheme\":\n                result.colorScheme = parseColorScheme(el, xml);\n                break;\n            case \"fontScheme\":\n                result.fontScheme = parseFontScheme(el, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\n    var result: DmlColorScheme = {\n        name: xml.attr(elem, \"name\"),\n        colors: {}\n    };\n\n    for (let el of xml.elements(elem)) {\n        var srgbClr = xml.element(el, \"srgbClr\");\n        var sysClr = xml.element(el, \"sysClr\");\n\n        if (srgbClr) {\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\n        } else if (sysClr) {\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\n    var result: DmlFontScheme = {\n        name: xml.attr(elem, \"name\"),\n    } as DmlFontScheme;\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"majorFont\":\n                result.majorFont = parseFontInfo(el, xml);\n                break;\n            case \"minorFont\":\n                result.minorFont = parseFontInfo(el, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\n    return {\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\n    };\n}","export function escapeClassName(className: string) {\n    return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and').toLowerCase();\n}\n\nexport function splitPath(path: string): [string, string] {\n    let si = path.lastIndexOf('/') + 1;\n    let folder = si == 0 ? \"\" : path.substring(0, si);\n    let fileName = si == 0 ? path : path.substring(si);\n\n    return [folder, fileName];\n}\n\nexport function resolvePath(path: string, base: string): string {\n    try {\n        const prefix = \"http://docx/\";\n        const url = new URL(path, prefix + base).toString();\n        return url.substring(prefix.length);\n    } catch {\n        return `${base}${path}`;\n    }\n}\n\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\n    return array.reduce((a, x) => {\n        a[by(x)] = x;\n        return a;\n    }, {});\n}\n\nexport function blobToBase64(blob: Blob): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = () => reject();\n        reader.readAsDataURL(blob);\n    });\n}\n\nexport function isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function isString(item: unknown): item is string {\n    return item && typeof item === 'string' || item instanceof String;\n}\n\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length)\n        return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                const val = target[key] ?? (target[key] = {});\n                mergeDeep(val, source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nexport function parseCssRules(text: string): Record<string, string> {\n    const result: Record<string, string> = {};\n\n    for (const rule of text.split(';')) {\n        const [key, val] = rule.split(':');\n        result[key] = val;\n    }\n\n    return result\n}\n\nexport function formatCssRules(style: Record<string, string>): string {\n    return Object.entries(style).map((k, v) => `${k}: ${v}`).join(';');\n}\n\nexport function asArray<T>(val: T | T[]): T[] {\n    return Array.isArray(val) ? val : [val];\n}","import {convertLength, LengthUsage} from '../document/common';\nimport {DomType, OpenXmlElement} from '../document/dom';\nimport xml from '../parser/xml-parser';\nimport {formatCssRules, parseCssRules} from '../utils';\n\nexport class VmlElement implements OpenXmlElement {\n    type: DomType = DomType.VmlElement;\n    tagName: string;\n    cssStyleText?: string;\n    attrs: Record<string, string> = {};\n    chidren: VmlElement[] = [];\n    wrapType?: string;\n    imageHref?: {\n        id: string,\n        title: string\n    }\n}\n\nexport function parseVmlElement(elem: Element): VmlElement {\n    var result = new VmlElement();\n\n    switch (elem.localName) {\n        case \"rect\":\n            result.tagName = \"rect\";\n            Object.assign(result.attrs, {width: '100%', height: '100%'});\n            break;\n\n        case \"oval\":\n            result.tagName = \"ellipse\";\n            Object.assign(result.attrs, {cx: \"50%\", cy: \"50%\", rx: \"50%\", ry: \"50%\"});\n            break;\n\n        case \"line\":\n            result.tagName = \"line\";\n            break;\n\n        case \"shape\":\n            result.tagName = \"g\";\n            break;\n\n        default:\n            return null;\n    }\n\n    for (const at of xml.attrs(elem)) {\n        switch (at.localName) {\n            case \"style\":\n                result.cssStyleText = at.value;\n                break;\n\n            case \"fillcolor\":\n                result.attrs.fill = at.value;\n                break;\n\n            case \"from\":\n                const [x1, y1] = parsePoint(at.value);\n                Object.assign(result.attrs, {x1, y1});\n                break;\n\n            case \"to\":\n                const [x2, y2] = parsePoint(at.value);\n                Object.assign(result.attrs, {x2, y2});\n                break;\n        }\n    }\n\n    for (const el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"stroke\":\n                Object.assign(result.attrs, parseStroke(el));\n                break;\n\n            case \"fill\":\n                Object.assign(result.attrs, parseFill(el));\n                break;\n\n            case \"imagedata\":\n                result.tagName = \"image\";\n                Object.assign(result.attrs, {width: '100%', height: '100%'});\n                result.imageHref = {\n                    id: xml.attr(el, \"id\"),\n                    title: xml.attr(el, \"title\"),\n                }\n                break;\n\n            default:\n                const child = parseVmlElement(el);\n                child && result.chidren.push(child);\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction parseStroke(el: Element): Record<string, string> {\n    return {\n        'stroke': xml.attr(el, \"color\"),\n        'stroke-width': xml.lengthAttr(el, \"weight\", LengthUsage.Emu) ?? '1px'\n    };\n}\n\nfunction parseFill(el: Element): Record<string, string> {\n    return {\n        //'fill': xml.attr(el, \"color2\")\n    };\n}\n\nfunction parsePoint(val: string): string[] {\n    return val.split(\",\");\n}\n\nfunction convertPath(path: string): string {\n    return path.replace(/([mlxe])|([-\\d]+)|([,])/g, (m) => {\n        if (/[-\\d]/.test(m)) return convertLength(m, LengthUsage.VmlEmu);\n        if (/[ml,]/.test(m)) return m;\n\n        return '';\n    });\n}","import {OutputType} from \"jszip\";\n\nimport {DocumentParser} from './document-parser';\nimport {Relationship, RelationshipTypes} from './common/relationship';\nimport {Part} from './common/part';\nimport {FontTablePart} from './font-table/font-table';\nimport {OpenXmlPackage} from './common/open-xml-package';\nimport {DocumentPart} from './document/document-part';\nimport {blobToBase64, resolvePath, splitPath} from './utils';\nimport {NumberingPart} from './numbering/numbering-part';\nimport {StylesPart} from './styles/styles-part';\nimport {FooterPart, HeaderPart} from \"./header-footer/parts\";\nimport {ExtendedPropsPart} from \"./document-props/extended-props-part\";\nimport {CorePropsPart} from \"./document-props/core-props-part\";\nimport {ThemePart} from \"./theme/theme-part\";\nimport {EndnotesPart, FootnotesPart} from \"./notes/parts\";\nimport {SettingsPart} from \"./settings/settings-part\";\nimport {CustomPropsPart} from \"./document-props/custom-props-part\";\n\nconst topLevelRels = [\n    {type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\"},\n    {type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\"},\n    {type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\"},\n    {type: RelationshipTypes.CustomProperties, target: \"docProps/custom.xml\"},\n];\n\nexport class WordDocument {\n    private _package: OpenXmlPackage;\n    private _parser: DocumentParser;\n    private _options: any;\n\n    rels: Relationship[];\n    parts: Part[] = [];\n    partsMap: Record<string, Part> = {};\n\n    documentPart: DocumentPart;\n    fontTablePart: FontTablePart;\n    numberingPart: NumberingPart;\n    stylesPart: StylesPart;\n    footnotesPart: FootnotesPart;\n    endnotesPart: EndnotesPart;\n    themePart: ThemePart;\n    corePropsPart: CorePropsPart;\n    extendedPropsPart: ExtendedPropsPart;\n    settingsPart: SettingsPart;\n\n    static async load(blob: Blob | any, parser: DocumentParser, options: any): Promise<WordDocument> {\n        var d = new WordDocument();\n\n        d._options = options;\n        d._parser = parser;\n        d._package = await OpenXmlPackage.load(blob, options);\n        d.rels = await d._package.loadRelationships();\n\n        await Promise.all(topLevelRels.map(rel => {\n            const r = d.rels.find(x => x.type === rel.type) ?? rel; //fallback                    \n            return d.loadRelationshipPart(r.target, r.type);\n        }));\n\n        return d;\n    }\n\n    save(type = \"blob\"): Promise<any> {\n        return this._package.save(type);\n    }\n\n    private async loadRelationshipPart(path: string, type: string): Promise<Part> {\n        if (this.partsMap[path])\n            return this.partsMap[path];\n\n        if (!this._package.get(path))\n            return null;\n\n        let part: Part = null;\n\n        switch (type) {\n            case RelationshipTypes.OfficeDocument:\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.FontTable:\n                this.fontTablePart = part = new FontTablePart(this._package, path);\n                break;\n\n            case RelationshipTypes.Numbering:\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Styles:\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Theme:\n                this.themePart = part = new ThemePart(this._package, path);\n                break;\n\n            case RelationshipTypes.Footnotes:\n                this.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Endnotes:\n                this.endnotesPart = part = new EndnotesPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Footer:\n                part = new FooterPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Header:\n                part = new HeaderPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.CoreProperties:\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\n                break;\n\n            case RelationshipTypes.ExtendedProperties:\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\n                break;\n\n            case RelationshipTypes.CustomProperties:\n                part = new CustomPropsPart(this._package, path);\n                break;\n\n            case RelationshipTypes.Settings:\n                this.settingsPart = part = new SettingsPart(this._package, path);\n                break;\n        }\n\n        if (part == null)\n            return Promise.resolve(null);\n\n        this.partsMap[path] = part;\n        this.parts.push(part);\n\n        await part.load();\n\n        if (part.rels?.length > 0) {\n            const [folder] = splitPath(part.path);\n            await Promise.all(part.rels.map(rel => this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)));\n        }\n\n        return part;\n    }\n\n    async loadDocumentImage(id: string, part?: Part): Promise<string> {\n        const x = await this.loadResource(part ?? this.documentPart, id, \"blob\");\n        return this.blobToURL(x);\n    }\n\n    async loadNumberingImage(id: string): Promise<string> {\n        const x = await this.loadResource(this.numberingPart, id, \"blob\");\n        return this.blobToURL(x);\n    }\n\n    async loadFont(id: string, key: string): Promise<string> {\n        const x = await this.loadResource(this.fontTablePart, id, \"uint8array\");\n        return x ? this.blobToURL(new Blob([deobfuscate(x, key)])) : x;\n    }\n\n    private blobToURL(blob: Blob): string | Promise<string> {\n        if (!blob)\n            return null;\n\n        if (this._options.useBase64URL) {\n            return blobToBase64(blob);\n        }\n\n        return URL.createObjectURL(blob);\n    }\n\n    findPartByRelId(id: string, basePart: Part = null) {\n        var rel = (basePart.rels ?? this.rels).find(r => r.id == id);\n        const folder = basePart ? splitPath(basePart.path)[0] : '';\n        return rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\n    }\n\n    getPathById(part: Part, id: string): string {\n        const rel = part.rels.find(x => x.id == id);\n        const [folder] = splitPath(part.path);\n        return rel ? resolvePath(rel.target, folder) : null;\n    }\n\n    private loadResource(part: Part, id: string, outputType: OutputType) {\n        const path = this.getPathById(part, id);\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\n    }\n}\n\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\n    const len = 16;\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\n    const numbers = new Array(len);\n\n    for (let i = 0; i < len; i++)\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\n\n    for (let i = 0; i < 32; i++)\n        data[i] = data[i] ^ numbers[i % len]\n\n    return data;\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__626__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t345: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","globalThis","__WEBPACK_EXTERNAL_MODULE__626__","___CSS_LOADER_URL_IMPORT_0___","URL","___CSS_LOADER_EXPORT___","___CSS_LOADER_URL_REPLACEMENT_0___","push","id","toString","cssWithMappingToString","list","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","url","options","String","__esModule","default","test","slice","hash","needQuotes","replace","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","OpenXmlPackage","constructor","_zip","xmlParser","XmlParser","get","path","file","startsWith","substr","normalizePath","update","static","input","zip","JSZip","loadAsync","save","type","generateAsync","load","async","Promise","resolve","relsPath","f","fn","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","rels","loadRelationships","xmlText","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","RelationshipTypes","xml","elements","e","attr","target","targetMode","autos","shd","color","borderColor","highlight","supportedNamespaceURIs","mmlTagMap","DomType","MmlMath","MmlMathParagraph","MmlFraction","MmlNumerator","MmlDenominator","MmlRadical","MmlDegree","MmlBase","MmlSuperscript","MmlSubscript","MmlSuperArgument","MmlSubArgument","MmlDelimiter","MmlNary","ignoreWidth","debug","parseNotes","elemName","elemClass","result","el","node","noteType","children","parseBodyElements","parseDocumentFile","xbody","element","background","sectPr","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","xmlUtil","colorAttr","localName","parseParagraph","parseTable","parseSdt","parseStylesFile","xstyles","foreach","n","parseStyle","parseDefaultStyles","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","isDefault","boolAttr","linked","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","s","parseTableStyle","console","warn","selector","modificator","mod","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","parseNumberingPicBullet","numId","abstractNumId","elementAttr","forEach","x","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","start","pStyleName","pStyle","rStyle","suff","bullet","find","levelText","format","parser","sdtContent","parseInserted","parentParser","Inserted","parseDeleted","Deleted","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","parseMathElement","paragraph","parseParagraphProperty","styleName","className","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","relId","href","Run","checkAlternateContent","Text","text","textContent","DeletedText","SimpleField","instruction","lock","dirty","fieldRun","Instruction","ComplexField","charType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","EndnoteReference","d","parseDrawing","parseVmlPicture","propsTag","run","MmlRun","parseMathProperies","hideDegree","beginChar","endChar","verticalAlign","valueOfVertAlign","VmlPicture","child","parseVmlElement","choice","requires","namespaceURI","lookupNamespaceURI","includes","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","lengthAttr","LengthUsage","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","colBandSize","rowBandSize","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","isHeader","Cell","parseTableCellProperties","cell","span","verticalMerge","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","firstLine","hanging","left","right","end","before","after","line","lineRule","toFixed","output","knownColors","cb","childNodes","nodeType","Node","ELEMENT_NODE","attrName","defValue","autoColor","v","themeColor","Dxa","convertLength","Percent","Border","_","asTagName","a","b","hexAttr","trim","CorePropsPart","Part","parseCoreProps","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseInt","CustomPropsPart","parseCustomProps","firstChild","formatId","nodeName","value","ExtendedPropsPart","parseExtendedProps","safeParseToInt","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","parseBorder","size","Point","frame","shadow","top","bottom","ns","wordml","drawingml","picture","compatibility","math","mul","unit","LineHeight","VmlEmu","usage","defaultValue","fontSize","DocumentPart","pkg","super","_documentParser","body","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parsePageNumber","chapSep","chapStyle","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","header","footer","gutter","headerRefs","footerRefs","titlePage","pageBorders","parseBorders","pageNumber","parseAsync","userOptions","ops","defaultOptions","WordDocument","DocumentParser","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","renderEndnotes","useBase64URL","useMathMLPolyfill","renderChanges","bodyContainer","styleContainer","doc","HtmlRenderer","window","document","render","FontTablePart","parseFonts","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","Header","Footer","BaseHeaderFooterPart","rootElement","createRootElement","WmlHeader","WmlFooter","svg","mathML","createElement","tagName","createElementNS","createSvgElement","Object","assign","appendChildren","removeAllElements","innerHTML","appendChild","isString","createTextNode","createStyleElement","cssText","appendComment","comment","createComment","htmlDocument","styleMap","currentPart","tableVerticalMerges","currentVerticalMerge","tableCellPositions","currentCellPosition","footnoteMap","endnoteMap","currentEndnoteIds","usedHeaderFooterParts","currentTabs","tabsTimeout","rootSelector","renderDefaultStyle","MathMLElement","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","processNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","notes","endnotesPart","settingsPart","defaultTabSize","settings","defaultTabStop","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","refreshTabStops","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","entries","colors","styleToString","fontsPart","ref","loadFont","then","fontData","cssValues","processStyleName","escapeClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","numberings","num","findStyle","processElement","processTable","r","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","sections","splitBySection","prevProps","l","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","renderHeaderFooter","contentElement","renderElements","renderNotes","refs","page","firstOfSection","into","part","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","bind","breakRun","splitRun","newParagraph","runChildren","newRun","currentSectProps","styleText","resetCounters","numberingClass","listStyleType","valiable","toLowerCase","loadNumberingImage","counter","numberingCounter","counterReset","levelTextToContent","numFormatToCssValue","defaultStyles","subStyles","linkedStyle","subStyle","noteIds","notesMap","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderDeletedText","renderTab","renderSymbol","renderBreak","renderContainer","Footnote","Endnote","renderFootnoteReference","renderEndnoteReference","renderVmlPicture","VmlElement","renderVmlElement","renderContainerNS","xmlns","renderMmlRadical","renderMmlDelimiter","renderMmlRun","renderMmlNary","renderInserted","renderDeleted","renderChildren","elems","flatMap","renderClass","renderCommonProperties","classList","add","renderRunProperties","rel","it","display","textIndent","loadDocumentImage","fontFamily","tabSpan","tabStopClass","stops","findParent","wrapper","renderTableColumns","pop","colElem","rowSpan","colSpan","container","setAttribute","cssStyleText","imageHref","requestAnimationFrame","bb","getBBox","Math","ceil","y","base","degree","grouped","sup","sub","supElem","asArray","subElem","charElem","lvl","selectors","numformat","substring","none","decimal","lowerLetter","upperLetter","lowerRoman","upperRoman","decimalZero","aiueo","aiueoFullWidth","chineseCounting","chineseCountingThousand","chineseLegalSimplified","chosung","ideographDigital","ideographTraditional","ideographLegalTraditional","ideographZodiac","iroha","irohaFullWidth","japaneseCounting","japaneseDigitalTenThousand","japaneseLegal","thaiNumbers","koreanCounting","koreanDigital","koreanDigital2","hebrew1","hebrew2","hindiNumbers","ganada","taiwaneseCounting","taiwaneseCountingThousand","taiwaneseDigital","clearTimeout","setTimeout","pixelToPoint","computePixelToPoint","tab","updateTabStop","defaultTab","lengthToPoint","parseFloat","temp","offsetWidth","removeChild","closest","ebb","getBoundingClientRect","pbb","pcs","getComputedStyle","tabStops","t","sort","lastTab","pWidthPt","marginLeft","pOffset","Array","from","querySelectorAll","nextIdx","indexOf","range","createRange","setStart","setEndBefore","setEndAfter","nextBB","textDecoration","wordSpacing","textDecorationStyle","WmlBaseNote","BaseNotePart","WmlFootnote","WmlEndnote","NumberingPart","parseNumberingPart","overrides","abstractId","parseNumberingLevelOverride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","charCodeAt","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","attrLocalName","attributes","floatAttr","convertBoolean","globalXmlParser","SettingsPart","parseSettings","parseNoteProperties","defaultNoteIds","nummeringFormat","footnoteProps","endnoteProps","autoHyphenation","StylesPart","ThemePart","parseTheme","DmlTheme","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","themeElements","isObject","isArray","si","lastIndexOf","prefix","array","by","reduce","blob","reject","reader","FileReader","onloadend","onerror","readAsDataURL","sources","source","shift","rule","chidren","parseStroke","parsePoint","cx","cy","rx","ry","at","fill","x1","y1","x2","y2","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","CustomProperties","parts","partsMap","_options","_parser","all","loadRelationshipPart","FontTable","Numbering","Styles","Theme","Footnotes","FootnotesPart","Endnotes","EndnotesPart","FooterPart","HeaderPart","corePropsPart","extendedPropsPart","Settings","folder","resolvePath","loadResource","blobToURL","Blob","deobfuscate","blobToBase64","createObjectURL","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","getter","definition","o","defineProperty","enumerable","obj","prop","prototype","call","toStringTag","baseURI","self","location"],"sourceRoot":""}